
Exercise6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa4  08002fa4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa4  08002fa4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa4  08002fa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  0800301c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800301c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049cd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012ec  00000000  00000000  00024a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000498  00000000  00000000  00025d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  000261f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d56  00000000  00000000  000265e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000544a  00000000  00000000  0003d336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f085  00000000  00000000  00042780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a4  00000000  00000000  000c1858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dd8 	.word	0x08002dd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002dd8 	.word	0x08002dd8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd51 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fbb5 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fbef 	bl	800093c <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int x;
  scanf("%d", &x);
 800015e:	1d3b      	adds	r3, r7, #4
 8000160:	4619      	mov	r1, r3
 8000162:	48be      	ldr	r0, [pc, #760]	; (800045c <main+0x310>)
 8000164:	f001 fc5e 	bl	8001a24 <iscanf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  switch(x)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	3b01      	subs	r3, #1
 800016c:	2b0b      	cmp	r3, #11
 800016e:	f200 835e 	bhi.w	800082e <main+0x6e2>
 8000172:	a201      	add	r2, pc, #4	; (adr r2, 8000178 <main+0x2c>)
 8000174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000178:	08000233 	.word	0x08000233
 800017c:	080002bd 	.word	0x080002bd
 8000180:	08000347 	.word	0x08000347
 8000184:	080003d1 	.word	0x080003d1
 8000188:	08000465 	.word	0x08000465
 800018c:	080004ef 	.word	0x080004ef
 8000190:	08000579 	.word	0x08000579
 8000194:	08000603 	.word	0x08000603
 8000198:	0800068d 	.word	0x0800068d
 800019c:	08000717 	.word	0x08000717
 80001a0:	080007a5 	.word	0x080007a5
 80001a4:	080001a9 	.word	0x080001a9
		  {
		  case 12:
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2110      	movs	r1, #16
 80001ac:	48ac      	ldr	r0, [pc, #688]	; (8000460 <main+0x314>)
 80001ae:	f001 f807 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	2120      	movs	r1, #32
 80001b6:	48aa      	ldr	r0, [pc, #680]	; (8000460 <main+0x314>)
 80001b8:	f001 f802 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	2140      	movs	r1, #64	; 0x40
 80001c0:	48a7      	ldr	r0, [pc, #668]	; (8000460 <main+0x314>)
 80001c2:	f000 fffd 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2180      	movs	r1, #128	; 0x80
 80001ca:	48a5      	ldr	r0, [pc, #660]	; (8000460 <main+0x314>)
 80001cc:	f000 fff8 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d6:	48a2      	ldr	r0, [pc, #648]	; (8000460 <main+0x314>)
 80001d8:	f000 fff2 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e2:	489f      	ldr	r0, [pc, #636]	; (8000460 <main+0x314>)
 80001e4:	f000 ffec 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ee:	489c      	ldr	r0, [pc, #624]	; (8000460 <main+0x314>)
 80001f0:	f000 ffe6 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fa:	4899      	ldr	r0, [pc, #612]	; (8000460 <main+0x314>)
 80001fc:	f000 ffe0 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000206:	4896      	ldr	r0, [pc, #600]	; (8000460 <main+0x314>)
 8000208:	f000 ffda 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	4893      	ldr	r0, [pc, #588]	; (8000460 <main+0x314>)
 8000214:	f000 ffd4 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800021e:	4890      	ldr	r0, [pc, #576]	; (8000460 <main+0x314>)
 8000220:	f000 ffce 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800022a:	488d      	ldr	r0, [pc, #564]	; (8000460 <main+0x314>)
 800022c:	f000 ffc8 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 8000230:	e341      	b.n	80008b6 <main+0x76a>
		  case 1:
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	2120      	movs	r1, #32
 8000236:	488a      	ldr	r0, [pc, #552]	; (8000460 <main+0x314>)
 8000238:	f000 ffc2 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2110      	movs	r1, #16
 8000240:	4887      	ldr	r0, [pc, #540]	; (8000460 <main+0x314>)
 8000242:	f000 ffbd 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	4885      	ldr	r0, [pc, #532]	; (8000460 <main+0x314>)
 800024c:	f000 ffb8 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2180      	movs	r1, #128	; 0x80
 8000254:	4882      	ldr	r0, [pc, #520]	; (8000460 <main+0x314>)
 8000256:	f000 ffb3 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 800025a:	2201      	movs	r2, #1
 800025c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000260:	487f      	ldr	r0, [pc, #508]	; (8000460 <main+0x314>)
 8000262:	f000 ffad 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026c:	487c      	ldr	r0, [pc, #496]	; (8000460 <main+0x314>)
 800026e:	f000 ffa7 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000278:	4879      	ldr	r0, [pc, #484]	; (8000460 <main+0x314>)
 800027a:	f000 ffa1 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000284:	4876      	ldr	r0, [pc, #472]	; (8000460 <main+0x314>)
 8000286:	f000 ff9b 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 800028a:	2201      	movs	r2, #1
 800028c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000290:	4873      	ldr	r0, [pc, #460]	; (8000460 <main+0x314>)
 8000292:	f000 ff95 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029c:	4870      	ldr	r0, [pc, #448]	; (8000460 <main+0x314>)
 800029e:	f000 ff8f 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a8:	486d      	ldr	r0, [pc, #436]	; (8000460 <main+0x314>)
 80002aa:	f000 ff89 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b4:	486a      	ldr	r0, [pc, #424]	; (8000460 <main+0x314>)
 80002b6:	f000 ff83 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 80002ba:	e2fc      	b.n	80008b6 <main+0x76a>
		  case 2:
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2140      	movs	r1, #64	; 0x40
 80002c0:	4867      	ldr	r0, [pc, #412]	; (8000460 <main+0x314>)
 80002c2:	f000 ff7d 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2120      	movs	r1, #32
 80002ca:	4865      	ldr	r0, [pc, #404]	; (8000460 <main+0x314>)
 80002cc:	f000 ff78 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2110      	movs	r1, #16
 80002d4:	4862      	ldr	r0, [pc, #392]	; (8000460 <main+0x314>)
 80002d6:	f000 ff73 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	4860      	ldr	r0, [pc, #384]	; (8000460 <main+0x314>)
 80002e0:	f000 ff6e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	485d      	ldr	r0, [pc, #372]	; (8000460 <main+0x314>)
 80002ec:	f000 ff68 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	485a      	ldr	r0, [pc, #360]	; (8000460 <main+0x314>)
 80002f8:	f000 ff62 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	4857      	ldr	r0, [pc, #348]	; (8000460 <main+0x314>)
 8000304:	f000 ff5c 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030e:	4854      	ldr	r0, [pc, #336]	; (8000460 <main+0x314>)
 8000310:	f000 ff56 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031a:	4851      	ldr	r0, [pc, #324]	; (8000460 <main+0x314>)
 800031c:	f000 ff50 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	484e      	ldr	r0, [pc, #312]	; (8000460 <main+0x314>)
 8000328:	f000 ff4a 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000332:	484b      	ldr	r0, [pc, #300]	; (8000460 <main+0x314>)
 8000334:	f000 ff44 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033e:	4848      	ldr	r0, [pc, #288]	; (8000460 <main+0x314>)
 8000340:	f000 ff3e 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 8000344:	e2b7      	b.n	80008b6 <main+0x76a>
		  case 3:
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2180      	movs	r1, #128	; 0x80
 800034a:	4845      	ldr	r0, [pc, #276]	; (8000460 <main+0x314>)
 800034c:	f000 ff38 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2120      	movs	r1, #32
 8000354:	4842      	ldr	r0, [pc, #264]	; (8000460 <main+0x314>)
 8000356:	f000 ff33 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	4840      	ldr	r0, [pc, #256]	; (8000460 <main+0x314>)
 8000360:	f000 ff2e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2110      	movs	r1, #16
 8000368:	483d      	ldr	r0, [pc, #244]	; (8000460 <main+0x314>)
 800036a:	f000 ff29 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000374:	483a      	ldr	r0, [pc, #232]	; (8000460 <main+0x314>)
 8000376:	f000 ff23 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000380:	4837      	ldr	r0, [pc, #220]	; (8000460 <main+0x314>)
 8000382:	f000 ff1d 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800038c:	4834      	ldr	r0, [pc, #208]	; (8000460 <main+0x314>)
 800038e:	f000 ff17 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 8000392:	2201      	movs	r2, #1
 8000394:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000398:	4831      	ldr	r0, [pc, #196]	; (8000460 <main+0x314>)
 800039a:	f000 ff11 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a4:	482e      	ldr	r0, [pc, #184]	; (8000460 <main+0x314>)
 80003a6:	f000 ff0b 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b0:	482b      	ldr	r0, [pc, #172]	; (8000460 <main+0x314>)
 80003b2:	f000 ff05 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003bc:	4828      	ldr	r0, [pc, #160]	; (8000460 <main+0x314>)
 80003be:	f000 feff 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c8:	4825      	ldr	r0, [pc, #148]	; (8000460 <main+0x314>)
 80003ca:	f000 fef9 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 80003ce:	e272      	b.n	80008b6 <main+0x76a>
		  case 4:
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4822      	ldr	r0, [pc, #136]	; (8000460 <main+0x314>)
 80003d8:	f000 fef2 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	481f      	ldr	r0, [pc, #124]	; (8000460 <main+0x314>)
 80003e2:	f000 feed 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	481d      	ldr	r0, [pc, #116]	; (8000460 <main+0x314>)
 80003ec:	f000 fee8 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	481a      	ldr	r0, [pc, #104]	; (8000460 <main+0x314>)
 80003f6:	f000 fee3 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2110      	movs	r1, #16
 80003fe:	4818      	ldr	r0, [pc, #96]	; (8000460 <main+0x314>)
 8000400:	f000 fede 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040a:	4815      	ldr	r0, [pc, #84]	; (8000460 <main+0x314>)
 800040c:	f000 fed8 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <main+0x314>)
 8000418:	f000 fed2 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000422:	480f      	ldr	r0, [pc, #60]	; (8000460 <main+0x314>)
 8000424:	f000 fecc 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800042e:	480c      	ldr	r0, [pc, #48]	; (8000460 <main+0x314>)
 8000430:	f000 fec6 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043a:	4809      	ldr	r0, [pc, #36]	; (8000460 <main+0x314>)
 800043c:	f000 fec0 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <main+0x314>)
 8000448:	f000 feba 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <main+0x314>)
 8000454:	f000 feb4 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 8000458:	e22d      	b.n	80008b6 <main+0x76a>
 800045a:	bf00      	nop
 800045c:	08002df0 	.word	0x08002df0
 8000460:	40010800 	.word	0x40010800
		  case 5:
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046a:	48cd      	ldr	r0, [pc, #820]	; (80007a0 <main+0x654>)
 800046c:	f000 fea8 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2120      	movs	r1, #32
 8000474:	48ca      	ldr	r0, [pc, #808]	; (80007a0 <main+0x654>)
 8000476:	f000 fea3 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 800047a:	2201      	movs	r2, #1
 800047c:	2140      	movs	r1, #64	; 0x40
 800047e:	48c8      	ldr	r0, [pc, #800]	; (80007a0 <main+0x654>)
 8000480:	f000 fe9e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2180      	movs	r1, #128	; 0x80
 8000488:	48c5      	ldr	r0, [pc, #788]	; (80007a0 <main+0x654>)
 800048a:	f000 fe99 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000494:	48c2      	ldr	r0, [pc, #776]	; (80007a0 <main+0x654>)
 8000496:	f000 fe93 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 800049a:	2201      	movs	r2, #1
 800049c:	2110      	movs	r1, #16
 800049e:	48c0      	ldr	r0, [pc, #768]	; (80007a0 <main+0x654>)
 80004a0:	f000 fe8e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004aa:	48bd      	ldr	r0, [pc, #756]	; (80007a0 <main+0x654>)
 80004ac:	f000 fe88 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b6:	48ba      	ldr	r0, [pc, #744]	; (80007a0 <main+0x654>)
 80004b8:	f000 fe82 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c2:	48b7      	ldr	r0, [pc, #732]	; (80007a0 <main+0x654>)
 80004c4:	f000 fe7c 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	48b4      	ldr	r0, [pc, #720]	; (80007a0 <main+0x654>)
 80004d0:	f000 fe76 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004da:	48b1      	ldr	r0, [pc, #708]	; (80007a0 <main+0x654>)
 80004dc:	f000 fe70 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e6:	48ae      	ldr	r0, [pc, #696]	; (80007a0 <main+0x654>)
 80004e8:	f000 fe6a 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 80004ec:	e1e3      	b.n	80008b6 <main+0x76a>
		  case 6:
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f4:	48aa      	ldr	r0, [pc, #680]	; (80007a0 <main+0x654>)
 80004f6:	f000 fe63 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2120      	movs	r1, #32
 80004fe:	48a8      	ldr	r0, [pc, #672]	; (80007a0 <main+0x654>)
 8000500:	f000 fe5e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	48a5      	ldr	r0, [pc, #660]	; (80007a0 <main+0x654>)
 800050a:	f000 fe59 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	48a3      	ldr	r0, [pc, #652]	; (80007a0 <main+0x654>)
 8000514:	f000 fe54 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051e:	48a0      	ldr	r0, [pc, #640]	; (80007a0 <main+0x654>)
 8000520:	f000 fe4e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	489d      	ldr	r0, [pc, #628]	; (80007a0 <main+0x654>)
 800052c:	f000 fe48 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2110      	movs	r1, #16
 8000534:	489a      	ldr	r0, [pc, #616]	; (80007a0 <main+0x654>)
 8000536:	f000 fe43 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000540:	4897      	ldr	r0, [pc, #604]	; (80007a0 <main+0x654>)
 8000542:	f000 fe3d 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054c:	4894      	ldr	r0, [pc, #592]	; (80007a0 <main+0x654>)
 800054e:	f000 fe37 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	4891      	ldr	r0, [pc, #580]	; (80007a0 <main+0x654>)
 800055a:	f000 fe31 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000564:	488e      	ldr	r0, [pc, #568]	; (80007a0 <main+0x654>)
 8000566:	f000 fe2b 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	488b      	ldr	r0, [pc, #556]	; (80007a0 <main+0x654>)
 8000572:	f000 fe25 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 8000576:	e19e      	b.n	80008b6 <main+0x76a>
		  case 7:
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057e:	4888      	ldr	r0, [pc, #544]	; (80007a0 <main+0x654>)
 8000580:	f000 fe1e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2120      	movs	r1, #32
 8000588:	4885      	ldr	r0, [pc, #532]	; (80007a0 <main+0x654>)
 800058a:	f000 fe19 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	4883      	ldr	r0, [pc, #524]	; (80007a0 <main+0x654>)
 8000594:	f000 fe14 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	4880      	ldr	r0, [pc, #512]	; (80007a0 <main+0x654>)
 800059e:	f000 fe0f 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	487d      	ldr	r0, [pc, #500]	; (80007a0 <main+0x654>)
 80005aa:	f000 fe09 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	487a      	ldr	r0, [pc, #488]	; (80007a0 <main+0x654>)
 80005b6:	f000 fe03 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	4877      	ldr	r0, [pc, #476]	; (80007a0 <main+0x654>)
 80005c2:	f000 fdfd 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2110      	movs	r1, #16
 80005ca:	4875      	ldr	r0, [pc, #468]	; (80007a0 <main+0x654>)
 80005cc:	f000 fdf8 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d6:	4872      	ldr	r0, [pc, #456]	; (80007a0 <main+0x654>)
 80005d8:	f000 fdf2 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	486f      	ldr	r0, [pc, #444]	; (80007a0 <main+0x654>)
 80005e4:	f000 fdec 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ee:	486c      	ldr	r0, [pc, #432]	; (80007a0 <main+0x654>)
 80005f0:	f000 fde6 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fa:	4869      	ldr	r0, [pc, #420]	; (80007a0 <main+0x654>)
 80005fc:	f000 fde0 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 8000600:	e159      	b.n	80008b6 <main+0x76a>
		  case 8:
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	4865      	ldr	r0, [pc, #404]	; (80007a0 <main+0x654>)
 800060a:	f000 fdd9 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2120      	movs	r1, #32
 8000612:	4863      	ldr	r0, [pc, #396]	; (80007a0 <main+0x654>)
 8000614:	f000 fdd4 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4860      	ldr	r0, [pc, #384]	; (80007a0 <main+0x654>)
 800061e:	f000 fdcf 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	485e      	ldr	r0, [pc, #376]	; (80007a0 <main+0x654>)
 8000628:	f000 fdca 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	485b      	ldr	r0, [pc, #364]	; (80007a0 <main+0x654>)
 8000634:	f000 fdc4 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	4858      	ldr	r0, [pc, #352]	; (80007a0 <main+0x654>)
 8000640:	f000 fdbe 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064a:	4855      	ldr	r0, [pc, #340]	; (80007a0 <main+0x654>)
 800064c:	f000 fdb8 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000656:	4852      	ldr	r0, [pc, #328]	; (80007a0 <main+0x654>)
 8000658:	f000 fdb2 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	484f      	ldr	r0, [pc, #316]	; (80007a0 <main+0x654>)
 8000662:	f000 fdad 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	484c      	ldr	r0, [pc, #304]	; (80007a0 <main+0x654>)
 800066e:	f000 fda7 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000678:	4849      	ldr	r0, [pc, #292]	; (80007a0 <main+0x654>)
 800067a:	f000 fda1 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000684:	4846      	ldr	r0, [pc, #280]	; (80007a0 <main+0x654>)
 8000686:	f000 fd9b 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 800068a:	e114      	b.n	80008b6 <main+0x76a>
		  case 9:
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000692:	4843      	ldr	r0, [pc, #268]	; (80007a0 <main+0x654>)
 8000694:	f000 fd94 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2120      	movs	r1, #32
 800069c:	4840      	ldr	r0, [pc, #256]	; (80007a0 <main+0x654>)
 800069e:	f000 fd8f 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	483e      	ldr	r0, [pc, #248]	; (80007a0 <main+0x654>)
 80006a8:	f000 fd8a 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	483b      	ldr	r0, [pc, #236]	; (80007a0 <main+0x654>)
 80006b2:	f000 fd85 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4838      	ldr	r0, [pc, #224]	; (80007a0 <main+0x654>)
 80006be:	f000 fd7f 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	4835      	ldr	r0, [pc, #212]	; (80007a0 <main+0x654>)
 80006ca:	f000 fd79 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d4:	4832      	ldr	r0, [pc, #200]	; (80007a0 <main+0x654>)
 80006d6:	f000 fd73 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	482f      	ldr	r0, [pc, #188]	; (80007a0 <main+0x654>)
 80006e2:	f000 fd6d 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <main+0x654>)
 80006ee:	f000 fd67 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2110      	movs	r1, #16
 80006f6:	482a      	ldr	r0, [pc, #168]	; (80007a0 <main+0x654>)
 80006f8:	f000 fd62 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4827      	ldr	r0, [pc, #156]	; (80007a0 <main+0x654>)
 8000704:	f000 fd5c 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070e:	4824      	ldr	r0, [pc, #144]	; (80007a0 <main+0x654>)
 8000710:	f000 fd56 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 8000714:	e0cf      	b.n	80008b6 <main+0x76a>
		  case 10:
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	4820      	ldr	r0, [pc, #128]	; (80007a0 <main+0x654>)
 800071e:	f000 fd4f 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	481e      	ldr	r0, [pc, #120]	; (80007a0 <main+0x654>)
 8000728:	f000 fd4a 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	481b      	ldr	r0, [pc, #108]	; (80007a0 <main+0x654>)
 8000732:	f000 fd45 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	4819      	ldr	r0, [pc, #100]	; (80007a0 <main+0x654>)
 800073c:	f000 fd40 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	4816      	ldr	r0, [pc, #88]	; (80007a0 <main+0x654>)
 8000748:	f000 fd3a 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000752:	4813      	ldr	r0, [pc, #76]	; (80007a0 <main+0x654>)
 8000754:	f000 fd34 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075e:	4810      	ldr	r0, [pc, #64]	; (80007a0 <main+0x654>)
 8000760:	f000 fd2e 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <main+0x654>)
 800076c:	f000 fd28 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <main+0x654>)
 8000778:	f000 fd22 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <main+0x654>)
 8000784:	f000 fd1c 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <main+0x654>)
 800078e:	f000 fd17 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4801      	ldr	r0, [pc, #4]	; (80007a0 <main+0x654>)
 800079a:	f000 fd11 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 800079e:	e08a      	b.n	80008b6 <main+0x76a>
 80007a0:	40010800 	.word	0x40010800
		  case 11:
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4845      	ldr	r0, [pc, #276]	; (80008c0 <main+0x774>)
 80007ac:	f000 fd08 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2120      	movs	r1, #32
 80007b4:	4842      	ldr	r0, [pc, #264]	; (80008c0 <main+0x774>)
 80007b6:	f000 fd03 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2140      	movs	r1, #64	; 0x40
 80007be:	4840      	ldr	r0, [pc, #256]	; (80008c0 <main+0x774>)
 80007c0:	f000 fcfe 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	483d      	ldr	r0, [pc, #244]	; (80008c0 <main+0x774>)
 80007ca:	f000 fcf9 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d4:	483a      	ldr	r0, [pc, #232]	; (80008c0 <main+0x774>)
 80007d6:	f000 fcf3 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4837      	ldr	r0, [pc, #220]	; (80008c0 <main+0x774>)
 80007e2:	f000 fced 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	4834      	ldr	r0, [pc, #208]	; (80008c0 <main+0x774>)
 80007ee:	f000 fce7 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f8:	4831      	ldr	r0, [pc, #196]	; (80008c0 <main+0x774>)
 80007fa:	f000 fce1 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000804:	482e      	ldr	r0, [pc, #184]	; (80008c0 <main+0x774>)
 8000806:	f000 fcdb 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	482b      	ldr	r0, [pc, #172]	; (80008c0 <main+0x774>)
 8000812:	f000 fcd5 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081c:	4828      	ldr	r0, [pc, #160]	; (80008c0 <main+0x774>)
 800081e:	f000 fccf 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2110      	movs	r1, #16
 8000826:	4826      	ldr	r0, [pc, #152]	; (80008c0 <main+0x774>)
 8000828:	f000 fcca 	bl	80011c0 <HAL_GPIO_WritePin>
			  break;
 800082c:	e043      	b.n	80008b6 <main+0x76a>
		  default:
			  HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2110      	movs	r1, #16
 8000832:	4823      	ldr	r0, [pc, #140]	; (80008c0 <main+0x774>)
 8000834:	f000 fcc4 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2120      	movs	r1, #32
 800083c:	4820      	ldr	r0, [pc, #128]	; (80008c0 <main+0x774>)
 800083e:	f000 fcbf 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_2_GPIO_Port, PIN_2_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	481e      	ldr	r0, [pc, #120]	; (80008c0 <main+0x774>)
 8000848:	f000 fcba 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_3_GPIO_Port, PIN_3_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <main+0x774>)
 8000852:	f000 fcb5 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_4_GPIO_Port, PIN_4_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <main+0x774>)
 800085e:	f000 fcaf 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_5_GPIO_Port, PIN_5_Pin, SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4815      	ldr	r0, [pc, #84]	; (80008c0 <main+0x774>)
 800086a:	f000 fca9 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_6_GPIO_Port, PIN_6_Pin, SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000874:	4812      	ldr	r0, [pc, #72]	; (80008c0 <main+0x774>)
 8000876:	f000 fca3 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_7_GPIO_Port, PIN_7_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000880:	480f      	ldr	r0, [pc, #60]	; (80008c0 <main+0x774>)
 8000882:	f000 fc9d 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_8_GPIO_Port, PIN_8_Pin, SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <main+0x774>)
 800088e:	f000 fc97 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_9_GPIO_Port, PIN_9_Pin, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <main+0x774>)
 800089a:	f000 fc91 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_10_GPIO_Port, PIN_10_Pin, SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <main+0x774>)
 80008a6:	f000 fc8b 	bl	80011c0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PIN_11_GPIO_Port, PIN_11_Pin, SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <main+0x774>)
 80008b2:	f000 fc85 	bl	80011c0 <HAL_GPIO_WritePin>
		  }
		  HAL_Delay(1000);
 80008b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ba:	f000 f9ff 	bl	8000cbc <HAL_Delay>
		  switch(x)
 80008be:	e453      	b.n	8000168 <main+0x1c>
 80008c0:	40010800 	.word	0x40010800

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b090      	sub	sp, #64	; 0x40
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	2228      	movs	r2, #40	; 0x28
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f89e 	bl	8001a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ee:	2310      	movs	r3, #16
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fc78 	bl	80011f0 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000906:	f000 f84d 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fee4 	bl	80016f0 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800092e:	f000 f839 	bl	80009a4 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3740      	adds	r7, #64	; 0x40
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_GPIO_Init+0x60>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a11      	ldr	r2, [pc, #68]	; (800099c <MX_GPIO_Init+0x60>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_GPIO_Init+0x60>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin|PIN_3_Pin
 8000968:	2200      	movs	r2, #0
 800096a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0x64>)
 8000970:	f000 fc26 	bl	80011c0 <HAL_GPIO_WritePin>
                          |PIN_8_Pin|PIN_9_Pin|PIN_10_Pin|PIN_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin PIN_3_Pin
                           PIN_4_Pin PIN_5_Pin PIN_6_Pin PIN_7_Pin
                           PIN_8_Pin PIN_9_Pin PIN_10_Pin PIN_11_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin|PIN_3_Pin
 8000974:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000978:	60bb      	str	r3, [r7, #8]
                          |PIN_4_Pin|PIN_5_Pin|PIN_6_Pin|PIN_7_Pin
                          |PIN_8_Pin|PIN_9_Pin|PIN_10_Pin|PIN_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2302      	movs	r3, #2
 8000984:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0x64>)
 800098e:	f000 fa9d 	bl	8000ecc <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010800 	.word	0x40010800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_MspInit+0x5c>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <HAL_MspInit+0x5c>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x5c>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x5c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_MspInit+0x60>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_MspInit+0x60>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f913 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e00a      	b.n	8000a8a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a74:	f3af 8000 	nop.w
 8000a78:	4601      	mov	r1, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	60ba      	str	r2, [r7, #8]
 8000a80:	b2ca      	uxtb	r2, r1
 8000a82:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3301      	adds	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dbf0      	blt.n	8000a74 <_read+0x12>
	}

return len;
 8000a92:	687b      	ldr	r3, [r7, #4]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e009      	b.n	8000ac2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	60ba      	str	r2, [r7, #8]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbf1      	blt.n	8000aae <_write+0x12>
	}
	return len;
 8000aca:	687b      	ldr	r3, [r7, #4]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_close>:

int _close(int file)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	return -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
	return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <_isatty>:

int _isatty(int file)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	return 1;
 8000b10:	2301      	movs	r3, #1
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f000 ff2c 	bl	80019c0 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20002800 	.word	0x20002800
 8000b94:	00000400 	.word	0x00000400
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	200000b0 	.word	0x200000b0

08000ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	; (8000be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bd2:	f7ff ffe5 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f000 fef9 	bl	80019cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fab7 	bl	800014c <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be8:	08002fac 	.word	0x08002fac
  ldr r2, =_sbss
 8000bec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf0:	200000ac 	.word	0x200000ac

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f92b 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fecc 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f935 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f90b 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000098 	.word	0x20000098

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000098 	.word	0x20000098

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff90 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff49 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb0 	bl	8000e20 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e148      	b.n	8001172 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8137 	bne.w	800116c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4aa3      	ldr	r2, [pc, #652]	; (8001190 <HAL_GPIO_Init+0x2c4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d05e      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f08:	4aa1      	ldr	r2, [pc, #644]	; (8001190 <HAL_GPIO_Init+0x2c4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d875      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f0e:	4aa1      	ldr	r2, [pc, #644]	; (8001194 <HAL_GPIO_Init+0x2c8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d058      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f14:	4a9f      	ldr	r2, [pc, #636]	; (8001194 <HAL_GPIO_Init+0x2c8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d86f      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f1a:	4a9f      	ldr	r2, [pc, #636]	; (8001198 <HAL_GPIO_Init+0x2cc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d052      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f20:	4a9d      	ldr	r2, [pc, #628]	; (8001198 <HAL_GPIO_Init+0x2cc>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d869      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f26:	4a9d      	ldr	r2, [pc, #628]	; (800119c <HAL_GPIO_Init+0x2d0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d04c      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f2c:	4a9b      	ldr	r2, [pc, #620]	; (800119c <HAL_GPIO_Init+0x2d0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d863      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f32:	4a9b      	ldr	r2, [pc, #620]	; (80011a0 <HAL_GPIO_Init+0x2d4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d046      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f38:	4a99      	ldr	r2, [pc, #612]	; (80011a0 <HAL_GPIO_Init+0x2d4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d85d      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d82a      	bhi.n	8000f98 <HAL_GPIO_Init+0xcc>
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d859      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f46:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <HAL_GPIO_Init+0x80>)
 8000f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4c:	08000fc7 	.word	0x08000fc7
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	08000fb3 	.word	0x08000fb3
 8000f58:	08000ff5 	.word	0x08000ff5
 8000f5c:	08000ffb 	.word	0x08000ffb
 8000f60:	08000ffb 	.word	0x08000ffb
 8000f64:	08000ffb 	.word	0x08000ffb
 8000f68:	08000ffb 	.word	0x08000ffb
 8000f6c:	08000ffb 	.word	0x08000ffb
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08000ffb 	.word	0x08000ffb
 8000f78:	08000ffb 	.word	0x08000ffb
 8000f7c:	08000ffb 	.word	0x08000ffb
 8000f80:	08000ffb 	.word	0x08000ffb
 8000f84:	08000ffb 	.word	0x08000ffb
 8000f88:	08000ffb 	.word	0x08000ffb
 8000f8c:	08000ffb 	.word	0x08000ffb
 8000f90:	08000fa9 	.word	0x08000fa9
 8000f94:	08000fbd 	.word	0x08000fbd
 8000f98:	4a82      	ldr	r2, [pc, #520]	; (80011a4 <HAL_GPIO_Init+0x2d8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f9e:	e02c      	b.n	8000ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e029      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	3304      	adds	r3, #4
 8000fae:	623b      	str	r3, [r7, #32]
          break;
 8000fb0:	e024      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e01f      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e01a      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	623b      	str	r3, [r7, #32]
          break;
 8000fd2:	e013      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d105      	bne.n	8000fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	611a      	str	r2, [r3, #16]
          break;
 8000fe6:	e009      	b.n	8000ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	615a      	str	r2, [r3, #20]
          break;
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
          break;
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          break;
 8000ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2bff      	cmp	r3, #255	; 0xff
 8001000:	d801      	bhi.n	8001006 <HAL_GPIO_Init+0x13a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	e001      	b.n	800100a <HAL_GPIO_Init+0x13e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2bff      	cmp	r3, #255	; 0xff
 8001010:	d802      	bhi.n	8001018 <HAL_GPIO_Init+0x14c>
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x152>
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	3b08      	subs	r3, #8
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	210f      	movs	r1, #15
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	6a39      	ldr	r1, [r7, #32]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8090 	beq.w	800116c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800104c:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <HAL_GPIO_Init+0x2dc>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a55      	ldr	r2, [pc, #340]	; (80011a8 <HAL_GPIO_Init+0x2dc>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <HAL_GPIO_Init+0x2dc>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a49      	ldr	r2, [pc, #292]	; (80011b0 <HAL_GPIO_Init+0x2e4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d00d      	beq.n	80010ac <HAL_GPIO_Init+0x1e0>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0x1dc>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d101      	bne.n	80010a4 <HAL_GPIO_Init+0x1d8>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x1e2>
 80010a4:	2303      	movs	r3, #3
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x1e2>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x1e2>
 80010ac:	2300      	movs	r3, #0
 80010ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010be:	493b      	ldr	r1, [pc, #236]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4937      	ldr	r1, [pc, #220]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4933      	ldr	r1, [pc, #204]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	492d      	ldr	r1, [pc, #180]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	43db      	mvns	r3, r3
 8001116:	4929      	ldr	r1, [pc, #164]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001118:	4013      	ands	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	4923      	ldr	r1, [pc, #140]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	43db      	mvns	r3, r3
 800113e:	491f      	ldr	r1, [pc, #124]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001140:	4013      	ands	r3, r2
 8001142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	4919      	ldr	r1, [pc, #100]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	60cb      	str	r3, [r1, #12]
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	4915      	ldr	r1, [pc, #84]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001168:	4013      	ands	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	3301      	adds	r3, #1
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	f47f aeaf 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	372c      	adds	r7, #44	; 0x2c
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	10320000 	.word	0x10320000
 8001194:	10310000 	.word	0x10310000
 8001198:	10220000 	.word	0x10220000
 800119c:	10210000 	.word	0x10210000
 80011a0:	10120000 	.word	0x10120000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e26c      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8087 	beq.w	800131e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001210:	4b92      	ldr	r3, [pc, #584]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b04      	cmp	r3, #4
 800121a:	d00c      	beq.n	8001236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800121c:	4b8f      	ldr	r3, [pc, #572]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d112      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
 8001228:	4b8c      	ldr	r3, [pc, #560]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b89      	ldr	r3, [pc, #548]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d06c      	beq.n	800131c <HAL_RCC_OscConfig+0x12c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d168      	bne.n	800131c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e246      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x76>
 8001258:	4b80      	ldr	r3, [pc, #512]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a7f      	ldr	r2, [pc, #508]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e02e      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b7b      	ldr	r3, [pc, #492]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7a      	ldr	r2, [pc, #488]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b78      	ldr	r3, [pc, #480]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a77      	ldr	r2, [pc, #476]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0xbc>
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a71      	ldr	r2, [pc, #452]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b6f      	ldr	r3, [pc, #444]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a6e      	ldr	r2, [pc, #440]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a6a      	ldr	r2, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b68      	ldr	r3, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a67      	ldr	r2, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fcec 	bl	8000ca8 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fce8 	bl	8000ca8 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1fa      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe4>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fcd8 	bl	8000ca8 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fcd4 	bl	8000ca8 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1e6      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x10c>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d063      	beq.n	80013f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b08      	cmp	r3, #8
 8001340:	d11c      	bne.n	800137c <HAL_RCC_OscConfig+0x18c>
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d116      	bne.n	800137c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_RCC_OscConfig+0x176>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e1ba      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4939      	ldr	r1, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	e03a      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fc8d 	bl	8000ca8 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fc89 	bl	8000ca8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e19b      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4927      	ldr	r1, [pc, #156]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc6c 	bl	8000ca8 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc68 	bl	8000ca8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e17a      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d03a      	beq.n	8001474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d019      	beq.n	800143a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fc4c 	bl	8000ca8 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fc48 	bl	8000ca8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e15a      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 faa6 	bl	8001984 <RCC_Delay>
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fc32 	bl	8000ca8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001446:	e00f      	b.n	8001468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fc2e 	bl	8000ca8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d908      	bls.n	8001468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e140      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	42420000 	.word	0x42420000
 8001464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e9      	bne.n	8001448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80a6 	beq.w	80015ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b97      	ldr	r3, [pc, #604]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b94      	ldr	r3, [pc, #592]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a93      	ldr	r2, [pc, #588]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a8a      	ldr	r2, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fbef 	bl	8000ca8 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fbeb 	bl	8000ca8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0fd      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x312>
 80014f4:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a7a      	ldr	r2, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	e02d      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x334>
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a72      	ldr	r2, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	e01c      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x356>
 800152c:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a66      	ldr	r2, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6213      	str	r3, [r2, #32]
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fb9f 	bl	8000ca8 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fb9b 	bl	8000ca8 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0ab      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ee      	beq.n	800156e <HAL_RCC_OscConfig+0x37e>
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb89 	bl	8000ca8 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fb85 	bl	8000ca8 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e095      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d105      	bne.n	80015ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c2:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8081 	beq.w	80016da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d061      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d146      	bne.n	800167a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb59 	bl	8000ca8 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff fb55 	bl	8000ca8 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e067      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d108      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	492d      	ldr	r1, [pc, #180]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a19      	ldr	r1, [r3, #32]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	430b      	orrs	r3, r1
 8001646:	4927      	ldr	r1, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb29 	bl	8000ca8 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb25 	bl	8000ca8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e037      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x46a>
 8001678:	e02f      	b.n	80016da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb12 	bl	8000ca8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb0e 	bl	8000ca8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e020      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x498>
 80016a6:	e018      	b.n	80016da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e013      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40007000 	.word	0x40007000
 80016ec:	42420060 	.word	0x42420060

080016f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0d0      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d910      	bls.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4965      	ldr	r1, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800176e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d040      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e073      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4936      	ldr	r1, [pc, #216]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa62 	bl	8000ca8 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa5e 	bl	8000ca8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e053      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d210      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4922      	ldr	r1, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1cc>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f9c0 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	08002e10 	.word	0x08002e10
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b490      	push	{r4, r7}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018cc:	1d3c      	adds	r4, r7, #4
 80018ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d4:	f240 2301 	movw	r3, #513	; 0x201
 80018d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d002      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d003      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x46>
 8001902:	e02d      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001906:	623b      	str	r3, [r7, #32]
      break;
 8001908:	e02d      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001916:	4413      	add	r3, r2
 8001918:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800191c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c5b      	lsrs	r3, r3, #17
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001936:	4413      	add	r3, r2
 8001938:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800193c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001942:	fb02 f203 	mul.w	r2, r2, r3
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	e004      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	623b      	str	r3, [r7, #32]
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001962:	623b      	str	r3, [r7, #32]
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	6a3b      	ldr	r3, [r7, #32]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bc90      	pop	{r4, r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	08002df4 	.word	0x08002df4
 8001978:	40021000 	.word	0x40021000
 800197c:	007a1200 	.word	0x007a1200
 8001980:	003d0900 	.word	0x003d0900

08001984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <RCC_Delay+0x34>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <RCC_Delay+0x38>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0a5b      	lsrs	r3, r3, #9
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a0:	bf00      	nop
  }
  while (Delay --);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	60fa      	str	r2, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <RCC_Delay+0x1c>
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000000 	.word	0x20000000
 80019bc:	10624dd3 	.word	0x10624dd3

080019c0 <__errno>:
 80019c0:	4b01      	ldr	r3, [pc, #4]	; (80019c8 <__errno+0x8>)
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	2000000c 	.word	0x2000000c

080019cc <__libc_init_array>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	2600      	movs	r6, #0
 80019d0:	4d0c      	ldr	r5, [pc, #48]	; (8001a04 <__libc_init_array+0x38>)
 80019d2:	4c0d      	ldr	r4, [pc, #52]	; (8001a08 <__libc_init_array+0x3c>)
 80019d4:	1b64      	subs	r4, r4, r5
 80019d6:	10a4      	asrs	r4, r4, #2
 80019d8:	42a6      	cmp	r6, r4
 80019da:	d109      	bne.n	80019f0 <__libc_init_array+0x24>
 80019dc:	f001 f9fc 	bl	8002dd8 <_init>
 80019e0:	2600      	movs	r6, #0
 80019e2:	4d0a      	ldr	r5, [pc, #40]	; (8001a0c <__libc_init_array+0x40>)
 80019e4:	4c0a      	ldr	r4, [pc, #40]	; (8001a10 <__libc_init_array+0x44>)
 80019e6:	1b64      	subs	r4, r4, r5
 80019e8:	10a4      	asrs	r4, r4, #2
 80019ea:	42a6      	cmp	r6, r4
 80019ec:	d105      	bne.n	80019fa <__libc_init_array+0x2e>
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
 80019f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f4:	4798      	blx	r3
 80019f6:	3601      	adds	r6, #1
 80019f8:	e7ee      	b.n	80019d8 <__libc_init_array+0xc>
 80019fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80019fe:	4798      	blx	r3
 8001a00:	3601      	adds	r6, #1
 8001a02:	e7f2      	b.n	80019ea <__libc_init_array+0x1e>
 8001a04:	08002fa4 	.word	0x08002fa4
 8001a08:	08002fa4 	.word	0x08002fa4
 8001a0c:	08002fa4 	.word	0x08002fa4
 8001a10:	08002fa8 	.word	0x08002fa8

08001a14 <memset>:
 8001a14:	4603      	mov	r3, r0
 8001a16:	4402      	add	r2, r0
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d100      	bne.n	8001a1e <memset+0xa>
 8001a1c:	4770      	bx	lr
 8001a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a22:	e7f9      	b.n	8001a18 <memset+0x4>

08001a24 <iscanf>:
 8001a24:	b40f      	push	{r0, r1, r2, r3}
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <iscanf+0x2c>)
 8001a28:	b513      	push	{r0, r1, r4, lr}
 8001a2a:	681c      	ldr	r4, [r3, #0]
 8001a2c:	b124      	cbz	r4, 8001a38 <iscanf+0x14>
 8001a2e:	69a3      	ldr	r3, [r4, #24]
 8001a30:	b913      	cbnz	r3, 8001a38 <iscanf+0x14>
 8001a32:	4620      	mov	r0, r4
 8001a34:	f000 f866 	bl	8001b04 <__sinit>
 8001a38:	ab05      	add	r3, sp, #20
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	9a04      	ldr	r2, [sp, #16]
 8001a3e:	6861      	ldr	r1, [r4, #4]
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	f000 fb1b 	bl	800207c <_vfiscanf_r>
 8001a46:	b002      	add	sp, #8
 8001a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a4c:	b004      	add	sp, #16
 8001a4e:	4770      	bx	lr
 8001a50:	2000000c 	.word	0x2000000c

08001a54 <std>:
 8001a54:	2300      	movs	r3, #0
 8001a56:	b510      	push	{r4, lr}
 8001a58:	4604      	mov	r4, r0
 8001a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8001a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a62:	6083      	str	r3, [r0, #8]
 8001a64:	8181      	strh	r1, [r0, #12]
 8001a66:	6643      	str	r3, [r0, #100]	; 0x64
 8001a68:	81c2      	strh	r2, [r0, #14]
 8001a6a:	6183      	str	r3, [r0, #24]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	2208      	movs	r2, #8
 8001a70:	305c      	adds	r0, #92	; 0x5c
 8001a72:	f7ff ffcf 	bl	8001a14 <memset>
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <std+0x38>)
 8001a78:	6224      	str	r4, [r4, #32]
 8001a7a:	6263      	str	r3, [r4, #36]	; 0x24
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <std+0x3c>)
 8001a7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <std+0x40>)
 8001a82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <std+0x44>)
 8001a86:	6323      	str	r3, [r4, #48]	; 0x30
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	bf00      	nop
 8001a8c:	08002521 	.word	0x08002521
 8001a90:	08002543 	.word	0x08002543
 8001a94:	0800257b 	.word	0x0800257b
 8001a98:	0800259f 	.word	0x0800259f

08001a9c <_cleanup_r>:
 8001a9c:	4901      	ldr	r1, [pc, #4]	; (8001aa4 <_cleanup_r+0x8>)
 8001a9e:	f000 b8cc 	b.w	8001c3a <_fwalk_reent>
 8001aa2:	bf00      	nop
 8001aa4:	08002aa5 	.word	0x08002aa5

08001aa8 <__sfmoreglue>:
 8001aa8:	b570      	push	{r4, r5, r6, lr}
 8001aaa:	2568      	movs	r5, #104	; 0x68
 8001aac:	1e4a      	subs	r2, r1, #1
 8001aae:	4355      	muls	r5, r2
 8001ab0:	460e      	mov	r6, r1
 8001ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ab6:	f000 f8e3 	bl	8001c80 <_malloc_r>
 8001aba:	4604      	mov	r4, r0
 8001abc:	b140      	cbz	r0, 8001ad0 <__sfmoreglue+0x28>
 8001abe:	2100      	movs	r1, #0
 8001ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ac4:	300c      	adds	r0, #12
 8001ac6:	60a0      	str	r0, [r4, #8]
 8001ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001acc:	f7ff ffa2 	bl	8001a14 <memset>
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}

08001ad4 <__sfp_lock_acquire>:
 8001ad4:	4801      	ldr	r0, [pc, #4]	; (8001adc <__sfp_lock_acquire+0x8>)
 8001ad6:	f000 b8d0 	b.w	8001c7a <__retarget_lock_acquire_recursive>
 8001ada:	bf00      	nop
 8001adc:	200000a4 	.word	0x200000a4

08001ae0 <__sfp_lock_release>:
 8001ae0:	4801      	ldr	r0, [pc, #4]	; (8001ae8 <__sfp_lock_release+0x8>)
 8001ae2:	f000 b8cb 	b.w	8001c7c <__retarget_lock_release_recursive>
 8001ae6:	bf00      	nop
 8001ae8:	200000a4 	.word	0x200000a4

08001aec <__sinit_lock_acquire>:
 8001aec:	4801      	ldr	r0, [pc, #4]	; (8001af4 <__sinit_lock_acquire+0x8>)
 8001aee:	f000 b8c4 	b.w	8001c7a <__retarget_lock_acquire_recursive>
 8001af2:	bf00      	nop
 8001af4:	2000009f 	.word	0x2000009f

08001af8 <__sinit_lock_release>:
 8001af8:	4801      	ldr	r0, [pc, #4]	; (8001b00 <__sinit_lock_release+0x8>)
 8001afa:	f000 b8bf 	b.w	8001c7c <__retarget_lock_release_recursive>
 8001afe:	bf00      	nop
 8001b00:	2000009f 	.word	0x2000009f

08001b04 <__sinit>:
 8001b04:	b510      	push	{r4, lr}
 8001b06:	4604      	mov	r4, r0
 8001b08:	f7ff fff0 	bl	8001aec <__sinit_lock_acquire>
 8001b0c:	69a3      	ldr	r3, [r4, #24]
 8001b0e:	b11b      	cbz	r3, 8001b18 <__sinit+0x14>
 8001b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b14:	f7ff bff0 	b.w	8001af8 <__sinit_lock_release>
 8001b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <__sinit+0x68>)
 8001b20:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <__sinit+0x6c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8001b26:	42a3      	cmp	r3, r4
 8001b28:	bf08      	it	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	bf08      	it	eq
 8001b30:	61a3      	streq	r3, [r4, #24]
 8001b32:	f000 f81f 	bl	8001b74 <__sfp>
 8001b36:	6060      	str	r0, [r4, #4]
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f000 f81b 	bl	8001b74 <__sfp>
 8001b3e:	60a0      	str	r0, [r4, #8]
 8001b40:	4620      	mov	r0, r4
 8001b42:	f000 f817 	bl	8001b74 <__sfp>
 8001b46:	2200      	movs	r2, #0
 8001b48:	2104      	movs	r1, #4
 8001b4a:	60e0      	str	r0, [r4, #12]
 8001b4c:	6860      	ldr	r0, [r4, #4]
 8001b4e:	f7ff ff81 	bl	8001a54 <std>
 8001b52:	2201      	movs	r2, #1
 8001b54:	2109      	movs	r1, #9
 8001b56:	68a0      	ldr	r0, [r4, #8]
 8001b58:	f7ff ff7c 	bl	8001a54 <std>
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	2112      	movs	r1, #18
 8001b60:	68e0      	ldr	r0, [r4, #12]
 8001b62:	f7ff ff77 	bl	8001a54 <std>
 8001b66:	2301      	movs	r3, #1
 8001b68:	61a3      	str	r3, [r4, #24]
 8001b6a:	e7d1      	b.n	8001b10 <__sinit+0xc>
 8001b6c:	08002e20 	.word	0x08002e20
 8001b70:	08001a9d 	.word	0x08001a9d

08001b74 <__sfp>:
 8001b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b76:	4607      	mov	r7, r0
 8001b78:	f7ff ffac 	bl	8001ad4 <__sfp_lock_acquire>
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <__sfp+0x84>)
 8001b7e:	681e      	ldr	r6, [r3, #0]
 8001b80:	69b3      	ldr	r3, [r6, #24]
 8001b82:	b913      	cbnz	r3, 8001b8a <__sfp+0x16>
 8001b84:	4630      	mov	r0, r6
 8001b86:	f7ff ffbd 	bl	8001b04 <__sinit>
 8001b8a:	3648      	adds	r6, #72	; 0x48
 8001b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	d503      	bpl.n	8001b9c <__sfp+0x28>
 8001b94:	6833      	ldr	r3, [r6, #0]
 8001b96:	b30b      	cbz	r3, 8001bdc <__sfp+0x68>
 8001b98:	6836      	ldr	r6, [r6, #0]
 8001b9a:	e7f7      	b.n	8001b8c <__sfp+0x18>
 8001b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ba0:	b9d5      	cbnz	r5, 8001bd8 <__sfp+0x64>
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <__sfp+0x88>)
 8001ba4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ba8:	60e3      	str	r3, [r4, #12]
 8001baa:	6665      	str	r5, [r4, #100]	; 0x64
 8001bac:	f000 f864 	bl	8001c78 <__retarget_lock_init_recursive>
 8001bb0:	f7ff ff96 	bl	8001ae0 <__sfp_lock_release>
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001bc0:	6025      	str	r5, [r4, #0]
 8001bc2:	61a5      	str	r5, [r4, #24]
 8001bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001bc8:	f7ff ff24 	bl	8001a14 <memset>
 8001bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bd8:	3468      	adds	r4, #104	; 0x68
 8001bda:	e7d9      	b.n	8001b90 <__sfp+0x1c>
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4638      	mov	r0, r7
 8001be0:	f7ff ff62 	bl	8001aa8 <__sfmoreglue>
 8001be4:	4604      	mov	r4, r0
 8001be6:	6030      	str	r0, [r6, #0]
 8001be8:	2800      	cmp	r0, #0
 8001bea:	d1d5      	bne.n	8001b98 <__sfp+0x24>
 8001bec:	f7ff ff78 	bl	8001ae0 <__sfp_lock_release>
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	e7ee      	b.n	8001bd4 <__sfp+0x60>
 8001bf6:	bf00      	nop
 8001bf8:	08002e20 	.word	0x08002e20
 8001bfc:	ffff0001 	.word	0xffff0001

08001c00 <_fwalk>:
 8001c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c04:	460f      	mov	r7, r1
 8001c06:	2600      	movs	r6, #0
 8001c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c0c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8001c10:	f1b8 0801 	subs.w	r8, r8, #1
 8001c14:	d505      	bpl.n	8001c22 <_fwalk+0x22>
 8001c16:	6824      	ldr	r4, [r4, #0]
 8001c18:	2c00      	cmp	r4, #0
 8001c1a:	d1f7      	bne.n	8001c0c <_fwalk+0xc>
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c22:	89ab      	ldrh	r3, [r5, #12]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d906      	bls.n	8001c36 <_fwalk+0x36>
 8001c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	d002      	beq.n	8001c36 <_fwalk+0x36>
 8001c30:	4628      	mov	r0, r5
 8001c32:	47b8      	blx	r7
 8001c34:	4306      	orrs	r6, r0
 8001c36:	3568      	adds	r5, #104	; 0x68
 8001c38:	e7ea      	b.n	8001c10 <_fwalk+0x10>

08001c3a <_fwalk_reent>:
 8001c3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c3e:	4606      	mov	r6, r0
 8001c40:	4688      	mov	r8, r1
 8001c42:	2700      	movs	r7, #0
 8001c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8001c50:	d505      	bpl.n	8001c5e <_fwalk_reent+0x24>
 8001c52:	6824      	ldr	r4, [r4, #0]
 8001c54:	2c00      	cmp	r4, #0
 8001c56:	d1f7      	bne.n	8001c48 <_fwalk_reent+0xe>
 8001c58:	4638      	mov	r0, r7
 8001c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c5e:	89ab      	ldrh	r3, [r5, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d907      	bls.n	8001c74 <_fwalk_reent+0x3a>
 8001c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	d003      	beq.n	8001c74 <_fwalk_reent+0x3a>
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	47c0      	blx	r8
 8001c72:	4307      	orrs	r7, r0
 8001c74:	3568      	adds	r5, #104	; 0x68
 8001c76:	e7e9      	b.n	8001c4c <_fwalk_reent+0x12>

08001c78 <__retarget_lock_init_recursive>:
 8001c78:	4770      	bx	lr

08001c7a <__retarget_lock_acquire_recursive>:
 8001c7a:	4770      	bx	lr

08001c7c <__retarget_lock_release_recursive>:
 8001c7c:	4770      	bx	lr
	...

08001c80 <_malloc_r>:
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c82:	1ccd      	adds	r5, r1, #3
 8001c84:	f025 0503 	bic.w	r5, r5, #3
 8001c88:	3508      	adds	r5, #8
 8001c8a:	2d0c      	cmp	r5, #12
 8001c8c:	bf38      	it	cc
 8001c8e:	250c      	movcc	r5, #12
 8001c90:	2d00      	cmp	r5, #0
 8001c92:	4606      	mov	r6, r0
 8001c94:	db01      	blt.n	8001c9a <_malloc_r+0x1a>
 8001c96:	42a9      	cmp	r1, r5
 8001c98:	d903      	bls.n	8001ca2 <_malloc_r+0x22>
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	6033      	str	r3, [r6, #0]
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ca2:	f000 ffdf 	bl	8002c64 <__malloc_lock>
 8001ca6:	4921      	ldr	r1, [pc, #132]	; (8001d2c <_malloc_r+0xac>)
 8001ca8:	680a      	ldr	r2, [r1, #0]
 8001caa:	4614      	mov	r4, r2
 8001cac:	b99c      	cbnz	r4, 8001cd6 <_malloc_r+0x56>
 8001cae:	4f20      	ldr	r7, [pc, #128]	; (8001d30 <_malloc_r+0xb0>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b923      	cbnz	r3, 8001cbe <_malloc_r+0x3e>
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	f000 fbe8 	bl	800248c <_sbrk_r>
 8001cbc:	6038      	str	r0, [r7, #0]
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f000 fbe3 	bl	800248c <_sbrk_r>
 8001cc6:	1c43      	adds	r3, r0, #1
 8001cc8:	d123      	bne.n	8001d12 <_malloc_r+0x92>
 8001cca:	230c      	movs	r3, #12
 8001ccc:	4630      	mov	r0, r6
 8001cce:	6033      	str	r3, [r6, #0]
 8001cd0:	f000 ffce 	bl	8002c70 <__malloc_unlock>
 8001cd4:	e7e3      	b.n	8001c9e <_malloc_r+0x1e>
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	1b5b      	subs	r3, r3, r5
 8001cda:	d417      	bmi.n	8001d0c <_malloc_r+0x8c>
 8001cdc:	2b0b      	cmp	r3, #11
 8001cde:	d903      	bls.n	8001ce8 <_malloc_r+0x68>
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	441c      	add	r4, r3
 8001ce4:	6025      	str	r5, [r4, #0]
 8001ce6:	e004      	b.n	8001cf2 <_malloc_r+0x72>
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	42a2      	cmp	r2, r4
 8001cec:	bf0c      	ite	eq
 8001cee:	600b      	streq	r3, [r1, #0]
 8001cf0:	6053      	strne	r3, [r2, #4]
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f000 ffbc 	bl	8002c70 <__malloc_unlock>
 8001cf8:	f104 000b 	add.w	r0, r4, #11
 8001cfc:	1d23      	adds	r3, r4, #4
 8001cfe:	f020 0007 	bic.w	r0, r0, #7
 8001d02:	1ac2      	subs	r2, r0, r3
 8001d04:	d0cc      	beq.n	8001ca0 <_malloc_r+0x20>
 8001d06:	1a1b      	subs	r3, r3, r0
 8001d08:	50a3      	str	r3, [r4, r2]
 8001d0a:	e7c9      	b.n	8001ca0 <_malloc_r+0x20>
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	6864      	ldr	r4, [r4, #4]
 8001d10:	e7cc      	b.n	8001cac <_malloc_r+0x2c>
 8001d12:	1cc4      	adds	r4, r0, #3
 8001d14:	f024 0403 	bic.w	r4, r4, #3
 8001d18:	42a0      	cmp	r0, r4
 8001d1a:	d0e3      	beq.n	8001ce4 <_malloc_r+0x64>
 8001d1c:	1a21      	subs	r1, r4, r0
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f000 fbb4 	bl	800248c <_sbrk_r>
 8001d24:	3001      	adds	r0, #1
 8001d26:	d1dd      	bne.n	8001ce4 <_malloc_r+0x64>
 8001d28:	e7cf      	b.n	8001cca <_malloc_r+0x4a>
 8001d2a:	bf00      	nop
 8001d2c:	20000090 	.word	0x20000090
 8001d30:	20000094 	.word	0x20000094

08001d34 <__svfiscanf_r>:
 8001d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d38:	461d      	mov	r5, r3
 8001d3a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8001d3c:	4606      	mov	r6, r0
 8001d3e:	07df      	lsls	r7, r3, #31
 8001d40:	460c      	mov	r4, r1
 8001d42:	4692      	mov	sl, r2
 8001d44:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8001d48:	d405      	bmi.n	8001d56 <__svfiscanf_r+0x22>
 8001d4a:	898b      	ldrh	r3, [r1, #12]
 8001d4c:	0598      	lsls	r0, r3, #22
 8001d4e:	d402      	bmi.n	8001d56 <__svfiscanf_r+0x22>
 8001d50:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001d52:	f7ff ff92 	bl	8001c7a <__retarget_lock_acquire_recursive>
 8001d56:	2300      	movs	r3, #0
 8001d58:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8001d5c:	4bae      	ldr	r3, [pc, #696]	; (8002018 <__svfiscanf_r+0x2e4>)
 8001d5e:	f10d 0804 	add.w	r8, sp, #4
 8001d62:	93a0      	str	r3, [sp, #640]	; 0x280
 8001d64:	4bad      	ldr	r3, [pc, #692]	; (800201c <__svfiscanf_r+0x2e8>)
 8001d66:	4fae      	ldr	r7, [pc, #696]	; (8002020 <__svfiscanf_r+0x2ec>)
 8001d68:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8002024 <__svfiscanf_r+0x2f0>
 8001d6c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8001d70:	93a1      	str	r3, [sp, #644]	; 0x284
 8001d72:	9500      	str	r5, [sp, #0]
 8001d74:	f89a b000 	ldrb.w	fp, [sl]
 8001d78:	f1bb 0f00 	cmp.w	fp, #0
 8001d7c:	f000 8170 	beq.w	8002060 <__svfiscanf_r+0x32c>
 8001d80:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8001d84:	f10a 0501 	add.w	r5, sl, #1
 8001d88:	f013 0308 	ands.w	r3, r3, #8
 8001d8c:	d019      	beq.n	8001dc2 <__svfiscanf_r+0x8e>
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dd0f      	ble.n	8001db4 <__svfiscanf_r+0x80>
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	5cba      	ldrb	r2, [r7, r2]
 8001d9a:	0711      	lsls	r1, r2, #28
 8001d9c:	d401      	bmi.n	8001da2 <__svfiscanf_r+0x6e>
 8001d9e:	46aa      	mov	sl, r5
 8001da0:	e7e8      	b.n	8001d74 <__svfiscanf_r+0x40>
 8001da2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001da4:	3301      	adds	r3, #1
 8001da6:	3201      	adds	r2, #1
 8001da8:	9245      	str	r2, [sp, #276]	; 0x114
 8001daa:	6862      	ldr	r2, [r4, #4]
 8001dac:	6023      	str	r3, [r4, #0]
 8001dae:	3a01      	subs	r2, #1
 8001db0:	6062      	str	r2, [r4, #4]
 8001db2:	e7ec      	b.n	8001d8e <__svfiscanf_r+0x5a>
 8001db4:	4621      	mov	r1, r4
 8001db6:	4630      	mov	r0, r6
 8001db8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001dba:	4798      	blx	r3
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d0e9      	beq.n	8001d94 <__svfiscanf_r+0x60>
 8001dc0:	e7ed      	b.n	8001d9e <__svfiscanf_r+0x6a>
 8001dc2:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8001dc6:	f040 8086 	bne.w	8001ed6 <__svfiscanf_r+0x1a2>
 8001dca:	9341      	str	r3, [sp, #260]	; 0x104
 8001dcc:	9343      	str	r3, [sp, #268]	; 0x10c
 8001dce:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001dd2:	220a      	movs	r2, #10
 8001dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8001dd6:	bf02      	ittt	eq
 8001dd8:	2310      	moveq	r3, #16
 8001dda:	f10a 0502 	addeq.w	r5, sl, #2
 8001dde:	9341      	streq	r3, [sp, #260]	; 0x104
 8001de0:	46aa      	mov	sl, r5
 8001de2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001de6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	d91e      	bls.n	8001e2c <__svfiscanf_r+0xf8>
 8001dee:	2203      	movs	r2, #3
 8001df0:	488c      	ldr	r0, [pc, #560]	; (8002024 <__svfiscanf_r+0x2f0>)
 8001df2:	f000 ff1b 	bl	8002c2c <memchr>
 8001df6:	b140      	cbz	r0, 8001e0a <__svfiscanf_r+0xd6>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4655      	mov	r5, sl
 8001dfc:	eba0 0009 	sub.w	r0, r0, r9
 8001e00:	fa03 f000 	lsl.w	r0, r3, r0
 8001e04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001e06:	4318      	orrs	r0, r3
 8001e08:	9041      	str	r0, [sp, #260]	; 0x104
 8001e0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e0e:	2b78      	cmp	r3, #120	; 0x78
 8001e10:	d807      	bhi.n	8001e22 <__svfiscanf_r+0xee>
 8001e12:	2b57      	cmp	r3, #87	; 0x57
 8001e14:	d811      	bhi.n	8001e3a <__svfiscanf_r+0x106>
 8001e16:	2b25      	cmp	r3, #37	; 0x25
 8001e18:	d05d      	beq.n	8001ed6 <__svfiscanf_r+0x1a2>
 8001e1a:	d857      	bhi.n	8001ecc <__svfiscanf_r+0x198>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80d6 	beq.w	8001fce <__svfiscanf_r+0x29a>
 8001e22:	2303      	movs	r3, #3
 8001e24:	9347      	str	r3, [sp, #284]	; 0x11c
 8001e26:	230a      	movs	r3, #10
 8001e28:	9342      	str	r3, [sp, #264]	; 0x108
 8001e2a:	e08b      	b.n	8001f44 <__svfiscanf_r+0x210>
 8001e2c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001e2e:	4655      	mov	r5, sl
 8001e30:	fb02 1303 	mla	r3, r2, r3, r1
 8001e34:	3b30      	subs	r3, #48	; 0x30
 8001e36:	9343      	str	r3, [sp, #268]	; 0x10c
 8001e38:	e7d2      	b.n	8001de0 <__svfiscanf_r+0xac>
 8001e3a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8001e3e:	2a20      	cmp	r2, #32
 8001e40:	d8ef      	bhi.n	8001e22 <__svfiscanf_r+0xee>
 8001e42:	a101      	add	r1, pc, #4	; (adr r1, 8001e48 <__svfiscanf_r+0x114>)
 8001e44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001e48:	08001f2f 	.word	0x08001f2f
 8001e4c:	08001e23 	.word	0x08001e23
 8001e50:	08001e23 	.word	0x08001e23
 8001e54:	08001f8d 	.word	0x08001f8d
 8001e58:	08001e23 	.word	0x08001e23
 8001e5c:	08001e23 	.word	0x08001e23
 8001e60:	08001e23 	.word	0x08001e23
 8001e64:	08001e23 	.word	0x08001e23
 8001e68:	08001e23 	.word	0x08001e23
 8001e6c:	08001e23 	.word	0x08001e23
 8001e70:	08001e23 	.word	0x08001e23
 8001e74:	08001fa3 	.word	0x08001fa3
 8001e78:	08001f79 	.word	0x08001f79
 8001e7c:	08001ed3 	.word	0x08001ed3
 8001e80:	08001ed3 	.word	0x08001ed3
 8001e84:	08001ed3 	.word	0x08001ed3
 8001e88:	08001e23 	.word	0x08001e23
 8001e8c:	08001f7d 	.word	0x08001f7d
 8001e90:	08001e23 	.word	0x08001e23
 8001e94:	08001e23 	.word	0x08001e23
 8001e98:	08001e23 	.word	0x08001e23
 8001e9c:	08001e23 	.word	0x08001e23
 8001ea0:	08001fb3 	.word	0x08001fb3
 8001ea4:	08001f85 	.word	0x08001f85
 8001ea8:	08001f27 	.word	0x08001f27
 8001eac:	08001e23 	.word	0x08001e23
 8001eb0:	08001e23 	.word	0x08001e23
 8001eb4:	08001faf 	.word	0x08001faf
 8001eb8:	08001e23 	.word	0x08001e23
 8001ebc:	08001f79 	.word	0x08001f79
 8001ec0:	08001e23 	.word	0x08001e23
 8001ec4:	08001e23 	.word	0x08001e23
 8001ec8:	08001f2f 	.word	0x08001f2f
 8001ecc:	3b45      	subs	r3, #69	; 0x45
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d8a7      	bhi.n	8001e22 <__svfiscanf_r+0xee>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e035      	b.n	8001f42 <__svfiscanf_r+0x20e>
 8001ed6:	6863      	ldr	r3, [r4, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	dd0d      	ble.n	8001ef8 <__svfiscanf_r+0x1c4>
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	455a      	cmp	r2, fp
 8001ee2:	f040 80bd 	bne.w	8002060 <__svfiscanf_r+0x32c>
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	6862      	ldr	r2, [r4, #4]
 8001eea:	6023      	str	r3, [r4, #0]
 8001eec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	6062      	str	r2, [r4, #4]
 8001ef4:	9345      	str	r3, [sp, #276]	; 0x114
 8001ef6:	e752      	b.n	8001d9e <__svfiscanf_r+0x6a>
 8001ef8:	4621      	mov	r1, r4
 8001efa:	4630      	mov	r0, r6
 8001efc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001efe:	4798      	blx	r3
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d0eb      	beq.n	8001edc <__svfiscanf_r+0x1a8>
 8001f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f06:	07da      	lsls	r2, r3, #31
 8001f08:	f140 80a2 	bpl.w	8002050 <__svfiscanf_r+0x31c>
 8001f0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d066      	beq.n	8001fe0 <__svfiscanf_r+0x2ac>
 8001f12:	89a3      	ldrh	r3, [r4, #12]
 8001f14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f18:	bf18      	it	ne
 8001f1a:	f04f 30ff 	movne.w	r0, #4294967295
 8001f1e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8001f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001f28:	f042 0220 	orr.w	r2, r2, #32
 8001f2c:	9241      	str	r2, [sp, #260]	; 0x104
 8001f2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f34:	9241      	str	r2, [sp, #260]	; 0x104
 8001f36:	2210      	movs	r2, #16
 8001f38:	2b6f      	cmp	r3, #111	; 0x6f
 8001f3a:	bf34      	ite	cc
 8001f3c:	2303      	movcc	r3, #3
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	9242      	str	r2, [sp, #264]	; 0x108
 8001f42:	9347      	str	r3, [sp, #284]	; 0x11c
 8001f44:	6863      	ldr	r3, [r4, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dd4d      	ble.n	8001fe6 <__svfiscanf_r+0x2b2>
 8001f4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001f4c:	065b      	lsls	r3, r3, #25
 8001f4e:	d404      	bmi.n	8001f5a <__svfiscanf_r+0x226>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	5cba      	ldrb	r2, [r7, r2]
 8001f56:	0710      	lsls	r0, r2, #28
 8001f58:	d44c      	bmi.n	8001ff4 <__svfiscanf_r+0x2c0>
 8001f5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	dc63      	bgt.n	8002028 <__svfiscanf_r+0x2f4>
 8001f60:	466b      	mov	r3, sp
 8001f62:	4622      	mov	r2, r4
 8001f64:	4630      	mov	r0, r6
 8001f66:	a941      	add	r1, sp, #260	; 0x104
 8001f68:	f000 f8b0 	bl	80020cc <_scanf_chars>
 8001f6c:	2801      	cmp	r0, #1
 8001f6e:	d077      	beq.n	8002060 <__svfiscanf_r+0x32c>
 8001f70:	2802      	cmp	r0, #2
 8001f72:	f47f af14 	bne.w	8001d9e <__svfiscanf_r+0x6a>
 8001f76:	e7c5      	b.n	8001f04 <__svfiscanf_r+0x1d0>
 8001f78:	220a      	movs	r2, #10
 8001f7a:	e7dd      	b.n	8001f38 <__svfiscanf_r+0x204>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9342      	str	r3, [sp, #264]	; 0x108
 8001f80:	2303      	movs	r3, #3
 8001f82:	e7de      	b.n	8001f42 <__svfiscanf_r+0x20e>
 8001f84:	2308      	movs	r3, #8
 8001f86:	9342      	str	r3, [sp, #264]	; 0x108
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e7da      	b.n	8001f42 <__svfiscanf_r+0x20e>
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4640      	mov	r0, r8
 8001f90:	f000 fa8c 	bl	80024ac <__sccl>
 8001f94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001f96:	4605      	mov	r5, r0
 8001f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9c:	9341      	str	r3, [sp, #260]	; 0x104
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e7cf      	b.n	8001f42 <__svfiscanf_r+0x20e>
 8001fa2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa8:	9341      	str	r3, [sp, #260]	; 0x104
 8001faa:	2300      	movs	r3, #0
 8001fac:	e7c9      	b.n	8001f42 <__svfiscanf_r+0x20e>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e7c7      	b.n	8001f42 <__svfiscanf_r+0x20e>
 8001fb2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8001fb4:	06c3      	lsls	r3, r0, #27
 8001fb6:	f53f aef2 	bmi.w	8001d9e <__svfiscanf_r+0x6a>
 8001fba:	9b00      	ldr	r3, [sp, #0]
 8001fbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001fbe:	1d19      	adds	r1, r3, #4
 8001fc0:	9100      	str	r1, [sp, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	07c0      	lsls	r0, r0, #31
 8001fc6:	bf4c      	ite	mi
 8001fc8:	801a      	strhmi	r2, [r3, #0]
 8001fca:	601a      	strpl	r2, [r3, #0]
 8001fcc:	e6e7      	b.n	8001d9e <__svfiscanf_r+0x6a>
 8001fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fd0:	07d8      	lsls	r0, r3, #31
 8001fd2:	d405      	bmi.n	8001fe0 <__svfiscanf_r+0x2ac>
 8001fd4:	89a3      	ldrh	r3, [r4, #12]
 8001fd6:	0599      	lsls	r1, r3, #22
 8001fd8:	d402      	bmi.n	8001fe0 <__svfiscanf_r+0x2ac>
 8001fda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fdc:	f7ff fe4e 	bl	8001c7c <__retarget_lock_release_recursive>
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	e79b      	b.n	8001f1e <__svfiscanf_r+0x1ea>
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	4630      	mov	r0, r6
 8001fea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001fec:	4798      	blx	r3
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d0ab      	beq.n	8001f4a <__svfiscanf_r+0x216>
 8001ff2:	e787      	b.n	8001f04 <__svfiscanf_r+0x1d0>
 8001ff4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001ff6:	3201      	adds	r2, #1
 8001ff8:	9245      	str	r2, [sp, #276]	; 0x114
 8001ffa:	6862      	ldr	r2, [r4, #4]
 8001ffc:	3a01      	subs	r2, #1
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	6062      	str	r2, [r4, #4]
 8002002:	dd02      	ble.n	800200a <__svfiscanf_r+0x2d6>
 8002004:	3301      	adds	r3, #1
 8002006:	6023      	str	r3, [r4, #0]
 8002008:	e7a2      	b.n	8001f50 <__svfiscanf_r+0x21c>
 800200a:	4621      	mov	r1, r4
 800200c:	4630      	mov	r0, r6
 800200e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002010:	4798      	blx	r3
 8002012:	2800      	cmp	r0, #0
 8002014:	d09c      	beq.n	8001f50 <__svfiscanf_r+0x21c>
 8002016:	e775      	b.n	8001f04 <__svfiscanf_r+0x1d0>
 8002018:	08002825 	.word	0x08002825
 800201c:	08002375 	.word	0x08002375
 8002020:	08002ea4 	.word	0x08002ea4
 8002024:	08002e84 	.word	0x08002e84
 8002028:	2b04      	cmp	r3, #4
 800202a:	dc06      	bgt.n	800203a <__svfiscanf_r+0x306>
 800202c:	466b      	mov	r3, sp
 800202e:	4622      	mov	r2, r4
 8002030:	4630      	mov	r0, r6
 8002032:	a941      	add	r1, sp, #260	; 0x104
 8002034:	f000 f8a2 	bl	800217c <_scanf_i>
 8002038:	e798      	b.n	8001f6c <__svfiscanf_r+0x238>
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <__svfiscanf_r+0x344>)
 800203c:	2b00      	cmp	r3, #0
 800203e:	f43f aeae 	beq.w	8001d9e <__svfiscanf_r+0x6a>
 8002042:	466b      	mov	r3, sp
 8002044:	4622      	mov	r2, r4
 8002046:	4630      	mov	r0, r6
 8002048:	a941      	add	r1, sp, #260	; 0x104
 800204a:	f3af 8000 	nop.w
 800204e:	e78d      	b.n	8001f6c <__svfiscanf_r+0x238>
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	0599      	lsls	r1, r3, #22
 8002054:	f53f af5a 	bmi.w	8001f0c <__svfiscanf_r+0x1d8>
 8002058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800205a:	f7ff fe0f 	bl	8001c7c <__retarget_lock_release_recursive>
 800205e:	e755      	b.n	8001f0c <__svfiscanf_r+0x1d8>
 8002060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002062:	07da      	lsls	r2, r3, #31
 8002064:	d405      	bmi.n	8002072 <__svfiscanf_r+0x33e>
 8002066:	89a3      	ldrh	r3, [r4, #12]
 8002068:	059b      	lsls	r3, r3, #22
 800206a:	d402      	bmi.n	8002072 <__svfiscanf_r+0x33e>
 800206c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800206e:	f7ff fe05 	bl	8001c7c <__retarget_lock_release_recursive>
 8002072:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002074:	e753      	b.n	8001f1e <__svfiscanf_r+0x1ea>
 8002076:	bf00      	nop
 8002078:	00000000 	.word	0x00000000

0800207c <_vfiscanf_r>:
 800207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002080:	460c      	mov	r4, r1
 8002082:	4616      	mov	r6, r2
 8002084:	461f      	mov	r7, r3
 8002086:	4605      	mov	r5, r0
 8002088:	b118      	cbz	r0, 8002092 <_vfiscanf_r+0x16>
 800208a:	6983      	ldr	r3, [r0, #24]
 800208c:	b90b      	cbnz	r3, 8002092 <_vfiscanf_r+0x16>
 800208e:	f7ff fd39 	bl	8001b04 <__sinit>
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <_vfiscanf_r+0x44>)
 8002094:	429c      	cmp	r4, r3
 8002096:	d108      	bne.n	80020aa <_vfiscanf_r+0x2e>
 8002098:	686c      	ldr	r4, [r5, #4]
 800209a:	463b      	mov	r3, r7
 800209c:	4632      	mov	r2, r6
 800209e:	4621      	mov	r1, r4
 80020a0:	4628      	mov	r0, r5
 80020a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020a6:	f7ff be45 	b.w	8001d34 <__svfiscanf_r>
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <_vfiscanf_r+0x48>)
 80020ac:	429c      	cmp	r4, r3
 80020ae:	d101      	bne.n	80020b4 <_vfiscanf_r+0x38>
 80020b0:	68ac      	ldr	r4, [r5, #8]
 80020b2:	e7f2      	b.n	800209a <_vfiscanf_r+0x1e>
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <_vfiscanf_r+0x4c>)
 80020b6:	429c      	cmp	r4, r3
 80020b8:	bf08      	it	eq
 80020ba:	68ec      	ldreq	r4, [r5, #12]
 80020bc:	e7ed      	b.n	800209a <_vfiscanf_r+0x1e>
 80020be:	bf00      	nop
 80020c0:	08002e44 	.word	0x08002e44
 80020c4:	08002e64 	.word	0x08002e64
 80020c8:	08002e24 	.word	0x08002e24

080020cc <_scanf_chars>:
 80020cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020d0:	4615      	mov	r5, r2
 80020d2:	688a      	ldr	r2, [r1, #8]
 80020d4:	4680      	mov	r8, r0
 80020d6:	460c      	mov	r4, r1
 80020d8:	b932      	cbnz	r2, 80020e8 <_scanf_chars+0x1c>
 80020da:	698a      	ldr	r2, [r1, #24]
 80020dc:	2a00      	cmp	r2, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2201      	moveq	r2, #1
 80020e2:	f04f 32ff 	movne.w	r2, #4294967295
 80020e6:	608a      	str	r2, [r1, #8]
 80020e8:	2700      	movs	r7, #0
 80020ea:	6822      	ldr	r2, [r4, #0]
 80020ec:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002178 <_scanf_chars+0xac>
 80020f0:	06d1      	lsls	r1, r2, #27
 80020f2:	bf5f      	itttt	pl
 80020f4:	681a      	ldrpl	r2, [r3, #0]
 80020f6:	1d11      	addpl	r1, r2, #4
 80020f8:	6019      	strpl	r1, [r3, #0]
 80020fa:	6816      	ldrpl	r6, [r2, #0]
 80020fc:	69a0      	ldr	r0, [r4, #24]
 80020fe:	b188      	cbz	r0, 8002124 <_scanf_chars+0x58>
 8002100:	2801      	cmp	r0, #1
 8002102:	d107      	bne.n	8002114 <_scanf_chars+0x48>
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	6963      	ldr	r3, [r4, #20]
 800210a:	5c9b      	ldrb	r3, [r3, r2]
 800210c:	b953      	cbnz	r3, 8002124 <_scanf_chars+0x58>
 800210e:	bb27      	cbnz	r7, 800215a <_scanf_chars+0x8e>
 8002110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002114:	2802      	cmp	r0, #2
 8002116:	d120      	bne.n	800215a <_scanf_chars+0x8e>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002120:	071b      	lsls	r3, r3, #28
 8002122:	d41a      	bmi.n	800215a <_scanf_chars+0x8e>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	3701      	adds	r7, #1
 8002128:	06da      	lsls	r2, r3, #27
 800212a:	bf5e      	ittt	pl
 800212c:	682b      	ldrpl	r3, [r5, #0]
 800212e:	781b      	ldrbpl	r3, [r3, #0]
 8002130:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002134:	682a      	ldr	r2, [r5, #0]
 8002136:	686b      	ldr	r3, [r5, #4]
 8002138:	3201      	adds	r2, #1
 800213a:	602a      	str	r2, [r5, #0]
 800213c:	68a2      	ldr	r2, [r4, #8]
 800213e:	3b01      	subs	r3, #1
 8002140:	3a01      	subs	r2, #1
 8002142:	606b      	str	r3, [r5, #4]
 8002144:	60a2      	str	r2, [r4, #8]
 8002146:	b142      	cbz	r2, 800215a <_scanf_chars+0x8e>
 8002148:	2b00      	cmp	r3, #0
 800214a:	dcd7      	bgt.n	80020fc <_scanf_chars+0x30>
 800214c:	4629      	mov	r1, r5
 800214e:	4640      	mov	r0, r8
 8002150:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002154:	4798      	blx	r3
 8002156:	2800      	cmp	r0, #0
 8002158:	d0d0      	beq.n	80020fc <_scanf_chars+0x30>
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f013 0310 	ands.w	r3, r3, #16
 8002160:	d105      	bne.n	800216e <_scanf_chars+0xa2>
 8002162:	68e2      	ldr	r2, [r4, #12]
 8002164:	3201      	adds	r2, #1
 8002166:	60e2      	str	r2, [r4, #12]
 8002168:	69a2      	ldr	r2, [r4, #24]
 800216a:	b102      	cbz	r2, 800216e <_scanf_chars+0xa2>
 800216c:	7033      	strb	r3, [r6, #0]
 800216e:	6923      	ldr	r3, [r4, #16]
 8002170:	2000      	movs	r0, #0
 8002172:	441f      	add	r7, r3
 8002174:	6127      	str	r7, [r4, #16]
 8002176:	e7cb      	b.n	8002110 <_scanf_chars+0x44>
 8002178:	08002ea4 	.word	0x08002ea4

0800217c <_scanf_i>:
 800217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002180:	460c      	mov	r4, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4b72      	ldr	r3, [pc, #456]	; (8002350 <_scanf_i+0x1d4>)
 8002186:	b087      	sub	sp, #28
 8002188:	4682      	mov	sl, r0
 800218a:	4616      	mov	r6, r2
 800218c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002190:	ab03      	add	r3, sp, #12
 8002192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002196:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <_scanf_i+0x1d8>)
 8002198:	69a1      	ldr	r1, [r4, #24]
 800219a:	4a6f      	ldr	r2, [pc, #444]	; (8002358 <_scanf_i+0x1dc>)
 800219c:	4627      	mov	r7, r4
 800219e:	2903      	cmp	r1, #3
 80021a0:	bf18      	it	ne
 80021a2:	461a      	movne	r2, r3
 80021a4:	68a3      	ldr	r3, [r4, #8]
 80021a6:	9201      	str	r2, [sp, #4]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80021ae:	bf81      	itttt	hi
 80021b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80021b4:	eb03 0905 	addhi.w	r9, r3, r5
 80021b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80021bc:	60a3      	strhi	r3, [r4, #8]
 80021be:	f857 3b1c 	ldr.w	r3, [r7], #28
 80021c2:	bf98      	it	ls
 80021c4:	f04f 0900 	movls.w	r9, #0
 80021c8:	463d      	mov	r5, r7
 80021ca:	f04f 0b00 	mov.w	fp, #0
 80021ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80021d2:	6023      	str	r3, [r4, #0]
 80021d4:	6831      	ldr	r1, [r6, #0]
 80021d6:	ab03      	add	r3, sp, #12
 80021d8:	2202      	movs	r2, #2
 80021da:	7809      	ldrb	r1, [r1, #0]
 80021dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80021e0:	f000 fd24 	bl	8002c2c <memchr>
 80021e4:	b328      	cbz	r0, 8002232 <_scanf_i+0xb6>
 80021e6:	f1bb 0f01 	cmp.w	fp, #1
 80021ea:	d159      	bne.n	80022a0 <_scanf_i+0x124>
 80021ec:	6862      	ldr	r2, [r4, #4]
 80021ee:	b92a      	cbnz	r2, 80021fc <_scanf_i+0x80>
 80021f0:	2308      	movs	r3, #8
 80021f2:	6822      	ldr	r2, [r4, #0]
 80021f4:	6063      	str	r3, [r4, #4]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	6022      	str	r2, [r4, #0]
 80021fc:	6822      	ldr	r2, [r4, #0]
 80021fe:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002202:	6022      	str	r2, [r4, #0]
 8002204:	68a2      	ldr	r2, [r4, #8]
 8002206:	1e51      	subs	r1, r2, #1
 8002208:	60a1      	str	r1, [r4, #8]
 800220a:	b192      	cbz	r2, 8002232 <_scanf_i+0xb6>
 800220c:	6832      	ldr	r2, [r6, #0]
 800220e:	1c51      	adds	r1, r2, #1
 8002210:	6031      	str	r1, [r6, #0]
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	f805 2b01 	strb.w	r2, [r5], #1
 8002218:	6872      	ldr	r2, [r6, #4]
 800221a:	3a01      	subs	r2, #1
 800221c:	2a00      	cmp	r2, #0
 800221e:	6072      	str	r2, [r6, #4]
 8002220:	dc07      	bgt.n	8002232 <_scanf_i+0xb6>
 8002222:	4631      	mov	r1, r6
 8002224:	4650      	mov	r0, sl
 8002226:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800222a:	4790      	blx	r2
 800222c:	2800      	cmp	r0, #0
 800222e:	f040 8085 	bne.w	800233c <_scanf_i+0x1c0>
 8002232:	f10b 0b01 	add.w	fp, fp, #1
 8002236:	f1bb 0f03 	cmp.w	fp, #3
 800223a:	d1cb      	bne.n	80021d4 <_scanf_i+0x58>
 800223c:	6863      	ldr	r3, [r4, #4]
 800223e:	b90b      	cbnz	r3, 8002244 <_scanf_i+0xc8>
 8002240:	230a      	movs	r3, #10
 8002242:	6063      	str	r3, [r4, #4]
 8002244:	6863      	ldr	r3, [r4, #4]
 8002246:	4945      	ldr	r1, [pc, #276]	; (800235c <_scanf_i+0x1e0>)
 8002248:	6960      	ldr	r0, [r4, #20]
 800224a:	1ac9      	subs	r1, r1, r3
 800224c:	f000 f92e 	bl	80024ac <__sccl>
 8002250:	f04f 0b00 	mov.w	fp, #0
 8002254:	68a3      	ldr	r3, [r4, #8]
 8002256:	6822      	ldr	r2, [r4, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d03d      	beq.n	80022d8 <_scanf_i+0x15c>
 800225c:	6831      	ldr	r1, [r6, #0]
 800225e:	6960      	ldr	r0, [r4, #20]
 8002260:	f891 c000 	ldrb.w	ip, [r1]
 8002264:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002268:	2800      	cmp	r0, #0
 800226a:	d035      	beq.n	80022d8 <_scanf_i+0x15c>
 800226c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002270:	d124      	bne.n	80022bc <_scanf_i+0x140>
 8002272:	0510      	lsls	r0, r2, #20
 8002274:	d522      	bpl.n	80022bc <_scanf_i+0x140>
 8002276:	f10b 0b01 	add.w	fp, fp, #1
 800227a:	f1b9 0f00 	cmp.w	r9, #0
 800227e:	d003      	beq.n	8002288 <_scanf_i+0x10c>
 8002280:	3301      	adds	r3, #1
 8002282:	f109 39ff 	add.w	r9, r9, #4294967295
 8002286:	60a3      	str	r3, [r4, #8]
 8002288:	6873      	ldr	r3, [r6, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	6073      	str	r3, [r6, #4]
 8002290:	dd1b      	ble.n	80022ca <_scanf_i+0x14e>
 8002292:	6833      	ldr	r3, [r6, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	6033      	str	r3, [r6, #0]
 8002298:	68a3      	ldr	r3, [r4, #8]
 800229a:	3b01      	subs	r3, #1
 800229c:	60a3      	str	r3, [r4, #8]
 800229e:	e7d9      	b.n	8002254 <_scanf_i+0xd8>
 80022a0:	f1bb 0f02 	cmp.w	fp, #2
 80022a4:	d1ae      	bne.n	8002204 <_scanf_i+0x88>
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80022ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80022b0:	d1bf      	bne.n	8002232 <_scanf_i+0xb6>
 80022b2:	2310      	movs	r3, #16
 80022b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b8:	6063      	str	r3, [r4, #4]
 80022ba:	e7a2      	b.n	8002202 <_scanf_i+0x86>
 80022bc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80022c0:	6022      	str	r2, [r4, #0]
 80022c2:	780b      	ldrb	r3, [r1, #0]
 80022c4:	f805 3b01 	strb.w	r3, [r5], #1
 80022c8:	e7de      	b.n	8002288 <_scanf_i+0x10c>
 80022ca:	4631      	mov	r1, r6
 80022cc:	4650      	mov	r0, sl
 80022ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80022d2:	4798      	blx	r3
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d0df      	beq.n	8002298 <_scanf_i+0x11c>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	05d9      	lsls	r1, r3, #23
 80022dc:	d50d      	bpl.n	80022fa <_scanf_i+0x17e>
 80022de:	42bd      	cmp	r5, r7
 80022e0:	d909      	bls.n	80022f6 <_scanf_i+0x17a>
 80022e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80022e6:	4632      	mov	r2, r6
 80022e8:	4650      	mov	r0, sl
 80022ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80022ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80022f2:	4798      	blx	r3
 80022f4:	464d      	mov	r5, r9
 80022f6:	42bd      	cmp	r5, r7
 80022f8:	d028      	beq.n	800234c <_scanf_i+0x1d0>
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	f012 0210 	ands.w	r2, r2, #16
 8002300:	d113      	bne.n	800232a <_scanf_i+0x1ae>
 8002302:	702a      	strb	r2, [r5, #0]
 8002304:	4639      	mov	r1, r7
 8002306:	6863      	ldr	r3, [r4, #4]
 8002308:	4650      	mov	r0, sl
 800230a:	9e01      	ldr	r6, [sp, #4]
 800230c:	47b0      	blx	r6
 800230e:	f8d8 3000 	ldr.w	r3, [r8]
 8002312:	6821      	ldr	r1, [r4, #0]
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	f8c8 2000 	str.w	r2, [r8]
 800231a:	f011 0f20 	tst.w	r1, #32
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	d00f      	beq.n	8002342 <_scanf_i+0x1c6>
 8002322:	6018      	str	r0, [r3, #0]
 8002324:	68e3      	ldr	r3, [r4, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	60e3      	str	r3, [r4, #12]
 800232a:	2000      	movs	r0, #0
 800232c:	1bed      	subs	r5, r5, r7
 800232e:	44ab      	add	fp, r5
 8002330:	6925      	ldr	r5, [r4, #16]
 8002332:	445d      	add	r5, fp
 8002334:	6125      	str	r5, [r4, #16]
 8002336:	b007      	add	sp, #28
 8002338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800233c:	f04f 0b00 	mov.w	fp, #0
 8002340:	e7ca      	b.n	80022d8 <_scanf_i+0x15c>
 8002342:	07ca      	lsls	r2, r1, #31
 8002344:	bf4c      	ite	mi
 8002346:	8018      	strhmi	r0, [r3, #0]
 8002348:	6018      	strpl	r0, [r3, #0]
 800234a:	e7eb      	b.n	8002324 <_scanf_i+0x1a8>
 800234c:	2001      	movs	r0, #1
 800234e:	e7f2      	b.n	8002336 <_scanf_i+0x1ba>
 8002350:	08002e04 	.word	0x08002e04
 8002354:	080027b1 	.word	0x080027b1
 8002358:	080026b5 	.word	0x080026b5
 800235c:	08002ea1 	.word	0x08002ea1

08002360 <lflush>:
 8002360:	8983      	ldrh	r3, [r0, #12]
 8002362:	f003 0309 	and.w	r3, r3, #9
 8002366:	2b09      	cmp	r3, #9
 8002368:	d101      	bne.n	800236e <lflush+0xe>
 800236a:	f000 bbd7 	b.w	8002b1c <fflush>
 800236e:	2000      	movs	r0, #0
 8002370:	4770      	bx	lr
	...

08002374 <__srefill_r>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	460c      	mov	r4, r1
 8002378:	4605      	mov	r5, r0
 800237a:	b118      	cbz	r0, 8002384 <__srefill_r+0x10>
 800237c:	6983      	ldr	r3, [r0, #24]
 800237e:	b90b      	cbnz	r3, 8002384 <__srefill_r+0x10>
 8002380:	f7ff fbc0 	bl	8001b04 <__sinit>
 8002384:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <__srefill_r+0x104>)
 8002386:	429c      	cmp	r4, r3
 8002388:	d10a      	bne.n	80023a0 <__srefill_r+0x2c>
 800238a:	686c      	ldr	r4, [r5, #4]
 800238c:	2300      	movs	r3, #0
 800238e:	6063      	str	r3, [r4, #4]
 8002390:	89a3      	ldrh	r3, [r4, #12]
 8002392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002396:	069e      	lsls	r6, r3, #26
 8002398:	d50c      	bpl.n	80023b4 <__srefill_r+0x40>
 800239a:	f04f 30ff 	mov.w	r0, #4294967295
 800239e:	e067      	b.n	8002470 <__srefill_r+0xfc>
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <__srefill_r+0x108>)
 80023a2:	429c      	cmp	r4, r3
 80023a4:	d101      	bne.n	80023aa <__srefill_r+0x36>
 80023a6:	68ac      	ldr	r4, [r5, #8]
 80023a8:	e7f0      	b.n	800238c <__srefill_r+0x18>
 80023aa:	4b35      	ldr	r3, [pc, #212]	; (8002480 <__srefill_r+0x10c>)
 80023ac:	429c      	cmp	r4, r3
 80023ae:	bf08      	it	eq
 80023b0:	68ec      	ldreq	r4, [r5, #12]
 80023b2:	e7eb      	b.n	800238c <__srefill_r+0x18>
 80023b4:	0758      	lsls	r0, r3, #29
 80023b6:	d449      	bmi.n	800244c <__srefill_r+0xd8>
 80023b8:	06d9      	lsls	r1, r3, #27
 80023ba:	d405      	bmi.n	80023c8 <__srefill_r+0x54>
 80023bc:	2309      	movs	r3, #9
 80023be:	602b      	str	r3, [r5, #0]
 80023c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	e7e8      	b.n	800239a <__srefill_r+0x26>
 80023c8:	071a      	lsls	r2, r3, #28
 80023ca:	d50b      	bpl.n	80023e4 <__srefill_r+0x70>
 80023cc:	4621      	mov	r1, r4
 80023ce:	4628      	mov	r0, r5
 80023d0:	f000 fb68 	bl	8002aa4 <_fflush_r>
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d1e0      	bne.n	800239a <__srefill_r+0x26>
 80023d8:	89a3      	ldrh	r3, [r4, #12]
 80023da:	60a0      	str	r0, [r4, #8]
 80023dc:	f023 0308 	bic.w	r3, r3, #8
 80023e0:	81a3      	strh	r3, [r4, #12]
 80023e2:	61a0      	str	r0, [r4, #24]
 80023e4:	89a3      	ldrh	r3, [r4, #12]
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	81a3      	strh	r3, [r4, #12]
 80023ec:	6923      	ldr	r3, [r4, #16]
 80023ee:	b91b      	cbnz	r3, 80023f8 <__srefill_r+0x84>
 80023f0:	4621      	mov	r1, r4
 80023f2:	4628      	mov	r0, r5
 80023f4:	f000 fbda 	bl	8002bac <__smakebuf_r>
 80023f8:	89a6      	ldrh	r6, [r4, #12]
 80023fa:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80023fe:	07b3      	lsls	r3, r6, #30
 8002400:	d00f      	beq.n	8002422 <__srefill_r+0xae>
 8002402:	2301      	movs	r3, #1
 8002404:	81a3      	strh	r3, [r4, #12]
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <__srefill_r+0x110>)
 8002408:	491f      	ldr	r1, [pc, #124]	; (8002488 <__srefill_r+0x114>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	f006 0609 	and.w	r6, r6, #9
 8002410:	f7ff fbf6 	bl	8001c00 <_fwalk>
 8002414:	2e09      	cmp	r6, #9
 8002416:	81a7      	strh	r7, [r4, #12]
 8002418:	d103      	bne.n	8002422 <__srefill_r+0xae>
 800241a:	4621      	mov	r1, r4
 800241c:	4628      	mov	r0, r5
 800241e:	f000 fabb 	bl	8002998 <__sflush_r>
 8002422:	6922      	ldr	r2, [r4, #16]
 8002424:	4628      	mov	r0, r5
 8002426:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002428:	6963      	ldr	r3, [r4, #20]
 800242a:	6a21      	ldr	r1, [r4, #32]
 800242c:	6022      	str	r2, [r4, #0]
 800242e:	47b0      	blx	r6
 8002430:	2800      	cmp	r0, #0
 8002432:	6060      	str	r0, [r4, #4]
 8002434:	dc1d      	bgt.n	8002472 <__srefill_r+0xfe>
 8002436:	bf18      	it	ne
 8002438:	2200      	movne	r2, #0
 800243a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800243e:	bf16      	itet	ne
 8002440:	6062      	strne	r2, [r4, #4]
 8002442:	f043 0320 	orreq.w	r3, r3, #32
 8002446:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800244a:	e7bb      	b.n	80023c4 <__srefill_r+0x50>
 800244c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800244e:	2900      	cmp	r1, #0
 8002450:	d0cc      	beq.n	80023ec <__srefill_r+0x78>
 8002452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002456:	4299      	cmp	r1, r3
 8002458:	d002      	beq.n	8002460 <__srefill_r+0xec>
 800245a:	4628      	mov	r0, r5
 800245c:	f000 fc0e 	bl	8002c7c <_free_r>
 8002460:	2000      	movs	r0, #0
 8002462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002464:	6360      	str	r0, [r4, #52]	; 0x34
 8002466:	6063      	str	r3, [r4, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0bf      	beq.n	80023ec <__srefill_r+0x78>
 800246c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800246e:	6023      	str	r3, [r4, #0]
 8002470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002472:	2000      	movs	r0, #0
 8002474:	e7fc      	b.n	8002470 <__srefill_r+0xfc>
 8002476:	bf00      	nop
 8002478:	08002e44 	.word	0x08002e44
 800247c:	08002e64 	.word	0x08002e64
 8002480:	08002e24 	.word	0x08002e24
 8002484:	08002e20 	.word	0x08002e20
 8002488:	08002361 	.word	0x08002361

0800248c <_sbrk_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	2300      	movs	r3, #0
 8002490:	4d05      	ldr	r5, [pc, #20]	; (80024a8 <_sbrk_r+0x1c>)
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	f7fe fb4c 	bl	8000b34 <_sbrk>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_sbrk_r+0x1a>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_sbrk_r+0x1a>
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	200000a8 	.word	0x200000a8

080024ac <__sccl>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	780b      	ldrb	r3, [r1, #0]
 80024b0:	4604      	mov	r4, r0
 80024b2:	2b5e      	cmp	r3, #94	; 0x5e
 80024b4:	bf13      	iteet	ne
 80024b6:	2200      	movne	r2, #0
 80024b8:	2201      	moveq	r2, #1
 80024ba:	784b      	ldrbeq	r3, [r1, #1]
 80024bc:	1c48      	addne	r0, r1, #1
 80024be:	bf08      	it	eq
 80024c0:	1c88      	addeq	r0, r1, #2
 80024c2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80024c6:	1e61      	subs	r1, r4, #1
 80024c8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80024cc:	42a9      	cmp	r1, r5
 80024ce:	d1fb      	bne.n	80024c8 <__sccl+0x1c>
 80024d0:	b90b      	cbnz	r3, 80024d6 <__sccl+0x2a>
 80024d2:	3801      	subs	r0, #1
 80024d4:	bd70      	pop	{r4, r5, r6, pc}
 80024d6:	f082 0101 	eor.w	r1, r2, #1
 80024da:	54e1      	strb	r1, [r4, r3]
 80024dc:	1c42      	adds	r2, r0, #1
 80024de:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80024e2:	4610      	mov	r0, r2
 80024e4:	2d2d      	cmp	r5, #45	; 0x2d
 80024e6:	f102 36ff 	add.w	r6, r2, #4294967295
 80024ea:	d006      	beq.n	80024fa <__sccl+0x4e>
 80024ec:	2d5d      	cmp	r5, #93	; 0x5d
 80024ee:	d0f1      	beq.n	80024d4 <__sccl+0x28>
 80024f0:	b90d      	cbnz	r5, 80024f6 <__sccl+0x4a>
 80024f2:	4630      	mov	r0, r6
 80024f4:	e7ee      	b.n	80024d4 <__sccl+0x28>
 80024f6:	462b      	mov	r3, r5
 80024f8:	e7ef      	b.n	80024da <__sccl+0x2e>
 80024fa:	7816      	ldrb	r6, [r2, #0]
 80024fc:	2e5d      	cmp	r6, #93	; 0x5d
 80024fe:	d0fa      	beq.n	80024f6 <__sccl+0x4a>
 8002500:	42b3      	cmp	r3, r6
 8002502:	dcf8      	bgt.n	80024f6 <__sccl+0x4a>
 8002504:	4618      	mov	r0, r3
 8002506:	3001      	adds	r0, #1
 8002508:	4286      	cmp	r6, r0
 800250a:	5421      	strb	r1, [r4, r0]
 800250c:	dcfb      	bgt.n	8002506 <__sccl+0x5a>
 800250e:	43d8      	mvns	r0, r3
 8002510:	4430      	add	r0, r6
 8002512:	42b3      	cmp	r3, r6
 8002514:	bfa8      	it	ge
 8002516:	2000      	movge	r0, #0
 8002518:	1c5d      	adds	r5, r3, #1
 800251a:	182b      	adds	r3, r5, r0
 800251c:	3202      	adds	r2, #2
 800251e:	e7de      	b.n	80024de <__sccl+0x32>

08002520 <__sread>:
 8002520:	b510      	push	{r4, lr}
 8002522:	460c      	mov	r4, r1
 8002524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002528:	f000 fc1a 	bl	8002d60 <_read_r>
 800252c:	2800      	cmp	r0, #0
 800252e:	bfab      	itete	ge
 8002530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002532:	89a3      	ldrhlt	r3, [r4, #12]
 8002534:	181b      	addge	r3, r3, r0
 8002536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800253a:	bfac      	ite	ge
 800253c:	6563      	strge	r3, [r4, #84]	; 0x54
 800253e:	81a3      	strhlt	r3, [r4, #12]
 8002540:	bd10      	pop	{r4, pc}

08002542 <__swrite>:
 8002542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002546:	461f      	mov	r7, r3
 8002548:	898b      	ldrh	r3, [r1, #12]
 800254a:	4605      	mov	r5, r0
 800254c:	05db      	lsls	r3, r3, #23
 800254e:	460c      	mov	r4, r1
 8002550:	4616      	mov	r6, r2
 8002552:	d505      	bpl.n	8002560 <__swrite+0x1e>
 8002554:	2302      	movs	r3, #2
 8002556:	2200      	movs	r2, #0
 8002558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800255c:	f000 faf0 	bl	8002b40 <_lseek_r>
 8002560:	89a3      	ldrh	r3, [r4, #12]
 8002562:	4632      	mov	r2, r6
 8002564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002568:	81a3      	strh	r3, [r4, #12]
 800256a:	4628      	mov	r0, r5
 800256c:	463b      	mov	r3, r7
 800256e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002576:	f000 b9ed 	b.w	8002954 <_write_r>

0800257a <__sseek>:
 800257a:	b510      	push	{r4, lr}
 800257c:	460c      	mov	r4, r1
 800257e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002582:	f000 fadd 	bl	8002b40 <_lseek_r>
 8002586:	1c43      	adds	r3, r0, #1
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	bf15      	itete	ne
 800258c:	6560      	strne	r0, [r4, #84]	; 0x54
 800258e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002596:	81a3      	strheq	r3, [r4, #12]
 8002598:	bf18      	it	ne
 800259a:	81a3      	strhne	r3, [r4, #12]
 800259c:	bd10      	pop	{r4, pc}

0800259e <__sclose>:
 800259e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a2:	f000 b9e9 	b.w	8002978 <_close_r>
	...

080025a8 <_strtol_l.isra.0>:
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025ae:	4686      	mov	lr, r0
 80025b0:	d001      	beq.n	80025b6 <_strtol_l.isra.0+0xe>
 80025b2:	2b24      	cmp	r3, #36	; 0x24
 80025b4:	d906      	bls.n	80025c4 <_strtol_l.isra.0+0x1c>
 80025b6:	f7ff fa03 	bl	80019c0 <__errno>
 80025ba:	2316      	movs	r3, #22
 80025bc:	6003      	str	r3, [r0, #0]
 80025be:	2000      	movs	r0, #0
 80025c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025c4:	468c      	mov	ip, r1
 80025c6:	4e3a      	ldr	r6, [pc, #232]	; (80026b0 <_strtol_l.isra.0+0x108>)
 80025c8:	4660      	mov	r0, ip
 80025ca:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80025ce:	5da5      	ldrb	r5, [r4, r6]
 80025d0:	f015 0508 	ands.w	r5, r5, #8
 80025d4:	d1f8      	bne.n	80025c8 <_strtol_l.isra.0+0x20>
 80025d6:	2c2d      	cmp	r4, #45	; 0x2d
 80025d8:	d133      	bne.n	8002642 <_strtol_l.isra.0+0x9a>
 80025da:	f04f 0801 	mov.w	r8, #1
 80025de:	f89c 4000 	ldrb.w	r4, [ip]
 80025e2:	f100 0c02 	add.w	ip, r0, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d05d      	beq.n	80026a6 <_strtol_l.isra.0+0xfe>
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d10c      	bne.n	8002608 <_strtol_l.isra.0+0x60>
 80025ee:	2c30      	cmp	r4, #48	; 0x30
 80025f0:	d10a      	bne.n	8002608 <_strtol_l.isra.0+0x60>
 80025f2:	f89c 0000 	ldrb.w	r0, [ip]
 80025f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80025fa:	2858      	cmp	r0, #88	; 0x58
 80025fc:	d14e      	bne.n	800269c <_strtol_l.isra.0+0xf4>
 80025fe:	2310      	movs	r3, #16
 8002600:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8002604:	f10c 0c02 	add.w	ip, ip, #2
 8002608:	2500      	movs	r5, #0
 800260a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800260e:	3f01      	subs	r7, #1
 8002610:	fbb7 f9f3 	udiv	r9, r7, r3
 8002614:	4628      	mov	r0, r5
 8002616:	fb03 7a19 	mls	sl, r3, r9, r7
 800261a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800261e:	2e09      	cmp	r6, #9
 8002620:	d818      	bhi.n	8002654 <_strtol_l.isra.0+0xac>
 8002622:	4634      	mov	r4, r6
 8002624:	42a3      	cmp	r3, r4
 8002626:	dd24      	ble.n	8002672 <_strtol_l.isra.0+0xca>
 8002628:	2d00      	cmp	r5, #0
 800262a:	db1f      	blt.n	800266c <_strtol_l.isra.0+0xc4>
 800262c:	4581      	cmp	r9, r0
 800262e:	d31d      	bcc.n	800266c <_strtol_l.isra.0+0xc4>
 8002630:	d101      	bne.n	8002636 <_strtol_l.isra.0+0x8e>
 8002632:	45a2      	cmp	sl, r4
 8002634:	db1a      	blt.n	800266c <_strtol_l.isra.0+0xc4>
 8002636:	2501      	movs	r5, #1
 8002638:	fb00 4003 	mla	r0, r0, r3, r4
 800263c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002640:	e7eb      	b.n	800261a <_strtol_l.isra.0+0x72>
 8002642:	2c2b      	cmp	r4, #43	; 0x2b
 8002644:	bf08      	it	eq
 8002646:	f89c 4000 	ldrbeq.w	r4, [ip]
 800264a:	46a8      	mov	r8, r5
 800264c:	bf08      	it	eq
 800264e:	f100 0c02 	addeq.w	ip, r0, #2
 8002652:	e7c8      	b.n	80025e6 <_strtol_l.isra.0+0x3e>
 8002654:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002658:	2e19      	cmp	r6, #25
 800265a:	d801      	bhi.n	8002660 <_strtol_l.isra.0+0xb8>
 800265c:	3c37      	subs	r4, #55	; 0x37
 800265e:	e7e1      	b.n	8002624 <_strtol_l.isra.0+0x7c>
 8002660:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002664:	2e19      	cmp	r6, #25
 8002666:	d804      	bhi.n	8002672 <_strtol_l.isra.0+0xca>
 8002668:	3c57      	subs	r4, #87	; 0x57
 800266a:	e7db      	b.n	8002624 <_strtol_l.isra.0+0x7c>
 800266c:	f04f 35ff 	mov.w	r5, #4294967295
 8002670:	e7e4      	b.n	800263c <_strtol_l.isra.0+0x94>
 8002672:	2d00      	cmp	r5, #0
 8002674:	da08      	bge.n	8002688 <_strtol_l.isra.0+0xe0>
 8002676:	2322      	movs	r3, #34	; 0x22
 8002678:	4638      	mov	r0, r7
 800267a:	f8ce 3000 	str.w	r3, [lr]
 800267e:	2a00      	cmp	r2, #0
 8002680:	d09e      	beq.n	80025c0 <_strtol_l.isra.0+0x18>
 8002682:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002686:	e007      	b.n	8002698 <_strtol_l.isra.0+0xf0>
 8002688:	f1b8 0f00 	cmp.w	r8, #0
 800268c:	d000      	beq.n	8002690 <_strtol_l.isra.0+0xe8>
 800268e:	4240      	negs	r0, r0
 8002690:	2a00      	cmp	r2, #0
 8002692:	d095      	beq.n	80025c0 <_strtol_l.isra.0+0x18>
 8002694:	2d00      	cmp	r5, #0
 8002696:	d1f4      	bne.n	8002682 <_strtol_l.isra.0+0xda>
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	e791      	b.n	80025c0 <_strtol_l.isra.0+0x18>
 800269c:	2430      	movs	r4, #48	; 0x30
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1b2      	bne.n	8002608 <_strtol_l.isra.0+0x60>
 80026a2:	2308      	movs	r3, #8
 80026a4:	e7b0      	b.n	8002608 <_strtol_l.isra.0+0x60>
 80026a6:	2c30      	cmp	r4, #48	; 0x30
 80026a8:	d0a3      	beq.n	80025f2 <_strtol_l.isra.0+0x4a>
 80026aa:	230a      	movs	r3, #10
 80026ac:	e7ac      	b.n	8002608 <_strtol_l.isra.0+0x60>
 80026ae:	bf00      	nop
 80026b0:	08002ea4 	.word	0x08002ea4

080026b4 <_strtol_r>:
 80026b4:	f7ff bf78 	b.w	80025a8 <_strtol_l.isra.0>

080026b8 <_strtoul_l.isra.0>:
 80026b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026bc:	468c      	mov	ip, r1
 80026be:	4686      	mov	lr, r0
 80026c0:	4e3a      	ldr	r6, [pc, #232]	; (80027ac <_strtoul_l.isra.0+0xf4>)
 80026c2:	4660      	mov	r0, ip
 80026c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80026c8:	5da5      	ldrb	r5, [r4, r6]
 80026ca:	f015 0508 	ands.w	r5, r5, #8
 80026ce:	d1f8      	bne.n	80026c2 <_strtoul_l.isra.0+0xa>
 80026d0:	2c2d      	cmp	r4, #45	; 0x2d
 80026d2:	d134      	bne.n	800273e <_strtoul_l.isra.0+0x86>
 80026d4:	f04f 0801 	mov.w	r8, #1
 80026d8:	f89c 4000 	ldrb.w	r4, [ip]
 80026dc:	f100 0c02 	add.w	ip, r0, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d05e      	beq.n	80027a2 <_strtoul_l.isra.0+0xea>
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d10c      	bne.n	8002702 <_strtoul_l.isra.0+0x4a>
 80026e8:	2c30      	cmp	r4, #48	; 0x30
 80026ea:	d10a      	bne.n	8002702 <_strtoul_l.isra.0+0x4a>
 80026ec:	f89c 0000 	ldrb.w	r0, [ip]
 80026f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80026f4:	2858      	cmp	r0, #88	; 0x58
 80026f6:	d14f      	bne.n	8002798 <_strtoul_l.isra.0+0xe0>
 80026f8:	2310      	movs	r3, #16
 80026fa:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80026fe:	f10c 0c02 	add.w	ip, ip, #2
 8002702:	f04f 37ff 	mov.w	r7, #4294967295
 8002706:	fbb7 f7f3 	udiv	r7, r7, r3
 800270a:	2500      	movs	r5, #0
 800270c:	fb03 f907 	mul.w	r9, r3, r7
 8002710:	4628      	mov	r0, r5
 8002712:	ea6f 0909 	mvn.w	r9, r9
 8002716:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800271a:	2e09      	cmp	r6, #9
 800271c:	d818      	bhi.n	8002750 <_strtoul_l.isra.0+0x98>
 800271e:	4634      	mov	r4, r6
 8002720:	42a3      	cmp	r3, r4
 8002722:	dd24      	ble.n	800276e <_strtoul_l.isra.0+0xb6>
 8002724:	2d00      	cmp	r5, #0
 8002726:	db1f      	blt.n	8002768 <_strtoul_l.isra.0+0xb0>
 8002728:	4287      	cmp	r7, r0
 800272a:	d31d      	bcc.n	8002768 <_strtoul_l.isra.0+0xb0>
 800272c:	d101      	bne.n	8002732 <_strtoul_l.isra.0+0x7a>
 800272e:	45a1      	cmp	r9, r4
 8002730:	db1a      	blt.n	8002768 <_strtoul_l.isra.0+0xb0>
 8002732:	2501      	movs	r5, #1
 8002734:	fb00 4003 	mla	r0, r0, r3, r4
 8002738:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800273c:	e7eb      	b.n	8002716 <_strtoul_l.isra.0+0x5e>
 800273e:	2c2b      	cmp	r4, #43	; 0x2b
 8002740:	bf08      	it	eq
 8002742:	f89c 4000 	ldrbeq.w	r4, [ip]
 8002746:	46a8      	mov	r8, r5
 8002748:	bf08      	it	eq
 800274a:	f100 0c02 	addeq.w	ip, r0, #2
 800274e:	e7c7      	b.n	80026e0 <_strtoul_l.isra.0+0x28>
 8002750:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002754:	2e19      	cmp	r6, #25
 8002756:	d801      	bhi.n	800275c <_strtoul_l.isra.0+0xa4>
 8002758:	3c37      	subs	r4, #55	; 0x37
 800275a:	e7e1      	b.n	8002720 <_strtoul_l.isra.0+0x68>
 800275c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002760:	2e19      	cmp	r6, #25
 8002762:	d804      	bhi.n	800276e <_strtoul_l.isra.0+0xb6>
 8002764:	3c57      	subs	r4, #87	; 0x57
 8002766:	e7db      	b.n	8002720 <_strtoul_l.isra.0+0x68>
 8002768:	f04f 35ff 	mov.w	r5, #4294967295
 800276c:	e7e4      	b.n	8002738 <_strtoul_l.isra.0+0x80>
 800276e:	2d00      	cmp	r5, #0
 8002770:	da07      	bge.n	8002782 <_strtoul_l.isra.0+0xca>
 8002772:	2322      	movs	r3, #34	; 0x22
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f8ce 3000 	str.w	r3, [lr]
 800277c:	b942      	cbnz	r2, 8002790 <_strtoul_l.isra.0+0xd8>
 800277e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002782:	f1b8 0f00 	cmp.w	r8, #0
 8002786:	d000      	beq.n	800278a <_strtoul_l.isra.0+0xd2>
 8002788:	4240      	negs	r0, r0
 800278a:	2a00      	cmp	r2, #0
 800278c:	d0f7      	beq.n	800277e <_strtoul_l.isra.0+0xc6>
 800278e:	b10d      	cbz	r5, 8002794 <_strtoul_l.isra.0+0xdc>
 8002790:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002794:	6011      	str	r1, [r2, #0]
 8002796:	e7f2      	b.n	800277e <_strtoul_l.isra.0+0xc6>
 8002798:	2430      	movs	r4, #48	; 0x30
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1b1      	bne.n	8002702 <_strtoul_l.isra.0+0x4a>
 800279e:	2308      	movs	r3, #8
 80027a0:	e7af      	b.n	8002702 <_strtoul_l.isra.0+0x4a>
 80027a2:	2c30      	cmp	r4, #48	; 0x30
 80027a4:	d0a2      	beq.n	80026ec <_strtoul_l.isra.0+0x34>
 80027a6:	230a      	movs	r3, #10
 80027a8:	e7ab      	b.n	8002702 <_strtoul_l.isra.0+0x4a>
 80027aa:	bf00      	nop
 80027ac:	08002ea4 	.word	0x08002ea4

080027b0 <_strtoul_r>:
 80027b0:	f7ff bf82 	b.w	80026b8 <_strtoul_l.isra.0>

080027b4 <__submore>:
 80027b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b8:	460c      	mov	r4, r1
 80027ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80027bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027c0:	4299      	cmp	r1, r3
 80027c2:	d11b      	bne.n	80027fc <__submore+0x48>
 80027c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027c8:	f7ff fa5a 	bl	8001c80 <_malloc_r>
 80027cc:	b918      	cbnz	r0, 80027d6 <__submore+0x22>
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295
 80027d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027da:	63a3      	str	r3, [r4, #56]	; 0x38
 80027dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80027e0:	6360      	str	r0, [r4, #52]	; 0x34
 80027e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80027e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80027ee:	7043      	strb	r3, [r0, #1]
 80027f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027f4:	7003      	strb	r3, [r0, #0]
 80027f6:	6020      	str	r0, [r4, #0]
 80027f8:	2000      	movs	r0, #0
 80027fa:	e7ea      	b.n	80027d2 <__submore+0x1e>
 80027fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80027fe:	0077      	lsls	r7, r6, #1
 8002800:	463a      	mov	r2, r7
 8002802:	f000 fa87 	bl	8002d14 <_realloc_r>
 8002806:	4605      	mov	r5, r0
 8002808:	2800      	cmp	r0, #0
 800280a:	d0e0      	beq.n	80027ce <__submore+0x1a>
 800280c:	eb00 0806 	add.w	r8, r0, r6
 8002810:	4601      	mov	r1, r0
 8002812:	4632      	mov	r2, r6
 8002814:	4640      	mov	r0, r8
 8002816:	f000 fa17 	bl	8002c48 <memcpy>
 800281a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800281e:	f8c4 8000 	str.w	r8, [r4]
 8002822:	e7e9      	b.n	80027f8 <__submore+0x44>

08002824 <_ungetc_r>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	4614      	mov	r4, r2
 8002828:	1c4a      	adds	r2, r1, #1
 800282a:	4606      	mov	r6, r0
 800282c:	460d      	mov	r5, r1
 800282e:	d103      	bne.n	8002838 <_ungetc_r+0x14>
 8002830:	f04f 35ff 	mov.w	r5, #4294967295
 8002834:	4628      	mov	r0, r5
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	b118      	cbz	r0, 8002842 <_ungetc_r+0x1e>
 800283a:	6983      	ldr	r3, [r0, #24]
 800283c:	b90b      	cbnz	r3, 8002842 <_ungetc_r+0x1e>
 800283e:	f7ff f961 	bl	8001b04 <__sinit>
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <_ungetc_r+0x124>)
 8002844:	429c      	cmp	r4, r3
 8002846:	d11d      	bne.n	8002884 <_ungetc_r+0x60>
 8002848:	6874      	ldr	r4, [r6, #4]
 800284a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800284c:	07db      	lsls	r3, r3, #31
 800284e:	d405      	bmi.n	800285c <_ungetc_r+0x38>
 8002850:	89a3      	ldrh	r3, [r4, #12]
 8002852:	0598      	lsls	r0, r3, #22
 8002854:	d402      	bmi.n	800285c <_ungetc_r+0x38>
 8002856:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002858:	f7ff fa0f 	bl	8001c7a <__retarget_lock_acquire_recursive>
 800285c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002860:	f023 0320 	bic.w	r3, r3, #32
 8002864:	0759      	lsls	r1, r3, #29
 8002866:	81a3      	strh	r3, [r4, #12]
 8002868:	b29a      	uxth	r2, r3
 800286a:	d42d      	bmi.n	80028c8 <_ungetc_r+0xa4>
 800286c:	06d3      	lsls	r3, r2, #27
 800286e:	d413      	bmi.n	8002898 <_ungetc_r+0x74>
 8002870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002872:	07dd      	lsls	r5, r3, #31
 8002874:	d4dc      	bmi.n	8002830 <_ungetc_r+0xc>
 8002876:	f412 7f00 	tst.w	r2, #512	; 0x200
 800287a:	d1d9      	bne.n	8002830 <_ungetc_r+0xc>
 800287c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800287e:	f7ff f9fd 	bl	8001c7c <__retarget_lock_release_recursive>
 8002882:	e7d5      	b.n	8002830 <_ungetc_r+0xc>
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <_ungetc_r+0x128>)
 8002886:	429c      	cmp	r4, r3
 8002888:	d101      	bne.n	800288e <_ungetc_r+0x6a>
 800288a:	68b4      	ldr	r4, [r6, #8]
 800288c:	e7dd      	b.n	800284a <_ungetc_r+0x26>
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <_ungetc_r+0x12c>)
 8002890:	429c      	cmp	r4, r3
 8002892:	bf08      	it	eq
 8002894:	68f4      	ldreq	r4, [r6, #12]
 8002896:	e7d8      	b.n	800284a <_ungetc_r+0x26>
 8002898:	0710      	lsls	r0, r2, #28
 800289a:	d511      	bpl.n	80028c0 <_ungetc_r+0x9c>
 800289c:	4621      	mov	r1, r4
 800289e:	4630      	mov	r0, r6
 80028a0:	f000 f900 	bl	8002aa4 <_fflush_r>
 80028a4:	b130      	cbz	r0, 80028b4 <_ungetc_r+0x90>
 80028a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028a8:	07d9      	lsls	r1, r3, #31
 80028aa:	d4c1      	bmi.n	8002830 <_ungetc_r+0xc>
 80028ac:	89a3      	ldrh	r3, [r4, #12]
 80028ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80028b2:	e7e2      	b.n	800287a <_ungetc_r+0x56>
 80028b4:	89a3      	ldrh	r3, [r4, #12]
 80028b6:	60a0      	str	r0, [r4, #8]
 80028b8:	f023 0308 	bic.w	r3, r3, #8
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	61a0      	str	r0, [r4, #24]
 80028c0:	89a3      	ldrh	r3, [r4, #12]
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	81a3      	strh	r3, [r4, #12]
 80028c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028ca:	6862      	ldr	r2, [r4, #4]
 80028cc:	b2ed      	uxtb	r5, r5
 80028ce:	b1d3      	cbz	r3, 8002906 <_ungetc_r+0xe2>
 80028d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028d2:	4293      	cmp	r3, r2
 80028d4:	dc05      	bgt.n	80028e2 <_ungetc_r+0xbe>
 80028d6:	4621      	mov	r1, r4
 80028d8:	4630      	mov	r0, r6
 80028da:	f7ff ff6b 	bl	80027b4 <__submore>
 80028de:	2800      	cmp	r0, #0
 80028e0:	d1e1      	bne.n	80028a6 <_ungetc_r+0x82>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	6022      	str	r2, [r4, #0]
 80028e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80028ec:	6863      	ldr	r3, [r4, #4]
 80028ee:	3301      	adds	r3, #1
 80028f0:	6063      	str	r3, [r4, #4]
 80028f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028f4:	07da      	lsls	r2, r3, #31
 80028f6:	d49d      	bmi.n	8002834 <_ungetc_r+0x10>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	059b      	lsls	r3, r3, #22
 80028fc:	d49a      	bmi.n	8002834 <_ungetc_r+0x10>
 80028fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002900:	f7ff f9bc 	bl	8001c7c <__retarget_lock_release_recursive>
 8002904:	e796      	b.n	8002834 <_ungetc_r+0x10>
 8002906:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002908:	6920      	ldr	r0, [r4, #16]
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	f001 0101 	and.w	r1, r1, #1
 8002910:	b160      	cbz	r0, 800292c <_ungetc_r+0x108>
 8002912:	4298      	cmp	r0, r3
 8002914:	d20a      	bcs.n	800292c <_ungetc_r+0x108>
 8002916:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800291a:	42a8      	cmp	r0, r5
 800291c:	d106      	bne.n	800292c <_ungetc_r+0x108>
 800291e:	3b01      	subs	r3, #1
 8002920:	3201      	adds	r2, #1
 8002922:	6023      	str	r3, [r4, #0]
 8002924:	6062      	str	r2, [r4, #4]
 8002926:	2900      	cmp	r1, #0
 8002928:	d184      	bne.n	8002834 <_ungetc_r+0x10>
 800292a:	e7e5      	b.n	80028f8 <_ungetc_r+0xd4>
 800292c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002934:	6363      	str	r3, [r4, #52]	; 0x34
 8002936:	2303      	movs	r3, #3
 8002938:	63a3      	str	r3, [r4, #56]	; 0x38
 800293a:	4623      	mov	r3, r4
 800293c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	2301      	movs	r3, #1
 8002944:	6063      	str	r3, [r4, #4]
 8002946:	e7ee      	b.n	8002926 <_ungetc_r+0x102>
 8002948:	08002e44 	.word	0x08002e44
 800294c:	08002e64 	.word	0x08002e64
 8002950:	08002e24 	.word	0x08002e24

08002954 <_write_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	2200      	movs	r2, #0
 800295e:	4d05      	ldr	r5, [pc, #20]	; (8002974 <_write_r+0x20>)
 8002960:	602a      	str	r2, [r5, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f7fe f89a 	bl	8000a9c <_write>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_write_r+0x1e>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b103      	cbz	r3, 8002972 <_write_r+0x1e>
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	200000a8 	.word	0x200000a8

08002978 <_close_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	2300      	movs	r3, #0
 800297c:	4d05      	ldr	r5, [pc, #20]	; (8002994 <_close_r+0x1c>)
 800297e:	4604      	mov	r4, r0
 8002980:	4608      	mov	r0, r1
 8002982:	602b      	str	r3, [r5, #0]
 8002984:	f7fe f8a6 	bl	8000ad4 <_close>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <_close_r+0x1a>
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	b103      	cbz	r3, 8002992 <_close_r+0x1a>
 8002990:	6023      	str	r3, [r4, #0]
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	200000a8 	.word	0x200000a8

08002998 <__sflush_r>:
 8002998:	898a      	ldrh	r2, [r1, #12]
 800299a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800299e:	4605      	mov	r5, r0
 80029a0:	0710      	lsls	r0, r2, #28
 80029a2:	460c      	mov	r4, r1
 80029a4:	d458      	bmi.n	8002a58 <__sflush_r+0xc0>
 80029a6:	684b      	ldr	r3, [r1, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	dc05      	bgt.n	80029b8 <__sflush_r+0x20>
 80029ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dc02      	bgt.n	80029b8 <__sflush_r+0x20>
 80029b2:	2000      	movs	r0, #0
 80029b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ba:	2e00      	cmp	r6, #0
 80029bc:	d0f9      	beq.n	80029b2 <__sflush_r+0x1a>
 80029be:	2300      	movs	r3, #0
 80029c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029c4:	682f      	ldr	r7, [r5, #0]
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	d032      	beq.n	8002a30 <__sflush_r+0x98>
 80029ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	075a      	lsls	r2, r3, #29
 80029d0:	d505      	bpl.n	80029de <__sflush_r+0x46>
 80029d2:	6863      	ldr	r3, [r4, #4]
 80029d4:	1ac0      	subs	r0, r0, r3
 80029d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029d8:	b10b      	cbz	r3, 80029de <__sflush_r+0x46>
 80029da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029dc:	1ac0      	subs	r0, r0, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	4602      	mov	r2, r0
 80029e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029e4:	4628      	mov	r0, r5
 80029e6:	6a21      	ldr	r1, [r4, #32]
 80029e8:	47b0      	blx	r6
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	d106      	bne.n	80029fe <__sflush_r+0x66>
 80029f0:	6829      	ldr	r1, [r5, #0]
 80029f2:	291d      	cmp	r1, #29
 80029f4:	d82c      	bhi.n	8002a50 <__sflush_r+0xb8>
 80029f6:	4a2a      	ldr	r2, [pc, #168]	; (8002aa0 <__sflush_r+0x108>)
 80029f8:	40ca      	lsrs	r2, r1
 80029fa:	07d6      	lsls	r6, r2, #31
 80029fc:	d528      	bpl.n	8002a50 <__sflush_r+0xb8>
 80029fe:	2200      	movs	r2, #0
 8002a00:	6062      	str	r2, [r4, #4]
 8002a02:	6922      	ldr	r2, [r4, #16]
 8002a04:	04d9      	lsls	r1, r3, #19
 8002a06:	6022      	str	r2, [r4, #0]
 8002a08:	d504      	bpl.n	8002a14 <__sflush_r+0x7c>
 8002a0a:	1c42      	adds	r2, r0, #1
 8002a0c:	d101      	bne.n	8002a12 <__sflush_r+0x7a>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	b903      	cbnz	r3, 8002a14 <__sflush_r+0x7c>
 8002a12:	6560      	str	r0, [r4, #84]	; 0x54
 8002a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a16:	602f      	str	r7, [r5, #0]
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	d0ca      	beq.n	80029b2 <__sflush_r+0x1a>
 8002a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a20:	4299      	cmp	r1, r3
 8002a22:	d002      	beq.n	8002a2a <__sflush_r+0x92>
 8002a24:	4628      	mov	r0, r5
 8002a26:	f000 f929 	bl	8002c7c <_free_r>
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8002a2e:	e7c1      	b.n	80029b4 <__sflush_r+0x1c>
 8002a30:	6a21      	ldr	r1, [r4, #32]
 8002a32:	2301      	movs	r3, #1
 8002a34:	4628      	mov	r0, r5
 8002a36:	47b0      	blx	r6
 8002a38:	1c41      	adds	r1, r0, #1
 8002a3a:	d1c7      	bne.n	80029cc <__sflush_r+0x34>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0c4      	beq.n	80029cc <__sflush_r+0x34>
 8002a42:	2b1d      	cmp	r3, #29
 8002a44:	d001      	beq.n	8002a4a <__sflush_r+0xb2>
 8002a46:	2b16      	cmp	r3, #22
 8002a48:	d101      	bne.n	8002a4e <__sflush_r+0xb6>
 8002a4a:	602f      	str	r7, [r5, #0]
 8002a4c:	e7b1      	b.n	80029b2 <__sflush_r+0x1a>
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a54:	81a3      	strh	r3, [r4, #12]
 8002a56:	e7ad      	b.n	80029b4 <__sflush_r+0x1c>
 8002a58:	690f      	ldr	r7, [r1, #16]
 8002a5a:	2f00      	cmp	r7, #0
 8002a5c:	d0a9      	beq.n	80029b2 <__sflush_r+0x1a>
 8002a5e:	0793      	lsls	r3, r2, #30
 8002a60:	bf18      	it	ne
 8002a62:	2300      	movne	r3, #0
 8002a64:	680e      	ldr	r6, [r1, #0]
 8002a66:	bf08      	it	eq
 8002a68:	694b      	ldreq	r3, [r1, #20]
 8002a6a:	eba6 0807 	sub.w	r8, r6, r7
 8002a6e:	600f      	str	r7, [r1, #0]
 8002a70:	608b      	str	r3, [r1, #8]
 8002a72:	f1b8 0f00 	cmp.w	r8, #0
 8002a76:	dd9c      	ble.n	80029b2 <__sflush_r+0x1a>
 8002a78:	4643      	mov	r3, r8
 8002a7a:	463a      	mov	r2, r7
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	6a21      	ldr	r1, [r4, #32]
 8002a80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a82:	47b0      	blx	r6
 8002a84:	2800      	cmp	r0, #0
 8002a86:	dc06      	bgt.n	8002a96 <__sflush_r+0xfe>
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	e78e      	b.n	80029b4 <__sflush_r+0x1c>
 8002a96:	4407      	add	r7, r0
 8002a98:	eba8 0800 	sub.w	r8, r8, r0
 8002a9c:	e7e9      	b.n	8002a72 <__sflush_r+0xda>
 8002a9e:	bf00      	nop
 8002aa0:	20400001 	.word	0x20400001

08002aa4 <_fflush_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	690b      	ldr	r3, [r1, #16]
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	b913      	cbnz	r3, 8002ab4 <_fflush_r+0x10>
 8002aae:	2500      	movs	r5, #0
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
 8002ab4:	b118      	cbz	r0, 8002abe <_fflush_r+0x1a>
 8002ab6:	6983      	ldr	r3, [r0, #24]
 8002ab8:	b90b      	cbnz	r3, 8002abe <_fflush_r+0x1a>
 8002aba:	f7ff f823 	bl	8001b04 <__sinit>
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <_fflush_r+0x6c>)
 8002ac0:	429c      	cmp	r4, r3
 8002ac2:	d11b      	bne.n	8002afc <_fflush_r+0x58>
 8002ac4:	686c      	ldr	r4, [r5, #4]
 8002ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ef      	beq.n	8002aae <_fflush_r+0xa>
 8002ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ad0:	07d0      	lsls	r0, r2, #31
 8002ad2:	d404      	bmi.n	8002ade <_fflush_r+0x3a>
 8002ad4:	0599      	lsls	r1, r3, #22
 8002ad6:	d402      	bmi.n	8002ade <_fflush_r+0x3a>
 8002ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ada:	f7ff f8ce 	bl	8001c7a <__retarget_lock_acquire_recursive>
 8002ade:	4628      	mov	r0, r5
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	f7ff ff59 	bl	8002998 <__sflush_r>
 8002ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ae8:	4605      	mov	r5, r0
 8002aea:	07da      	lsls	r2, r3, #31
 8002aec:	d4e0      	bmi.n	8002ab0 <_fflush_r+0xc>
 8002aee:	89a3      	ldrh	r3, [r4, #12]
 8002af0:	059b      	lsls	r3, r3, #22
 8002af2:	d4dd      	bmi.n	8002ab0 <_fflush_r+0xc>
 8002af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002af6:	f7ff f8c1 	bl	8001c7c <__retarget_lock_release_recursive>
 8002afa:	e7d9      	b.n	8002ab0 <_fflush_r+0xc>
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <_fflush_r+0x70>)
 8002afe:	429c      	cmp	r4, r3
 8002b00:	d101      	bne.n	8002b06 <_fflush_r+0x62>
 8002b02:	68ac      	ldr	r4, [r5, #8]
 8002b04:	e7df      	b.n	8002ac6 <_fflush_r+0x22>
 8002b06:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <_fflush_r+0x74>)
 8002b08:	429c      	cmp	r4, r3
 8002b0a:	bf08      	it	eq
 8002b0c:	68ec      	ldreq	r4, [r5, #12]
 8002b0e:	e7da      	b.n	8002ac6 <_fflush_r+0x22>
 8002b10:	08002e44 	.word	0x08002e44
 8002b14:	08002e64 	.word	0x08002e64
 8002b18:	08002e24 	.word	0x08002e24

08002b1c <fflush>:
 8002b1c:	4601      	mov	r1, r0
 8002b1e:	b920      	cbnz	r0, 8002b2a <fflush+0xe>
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <fflush+0x18>)
 8002b22:	4905      	ldr	r1, [pc, #20]	; (8002b38 <fflush+0x1c>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	f7ff b888 	b.w	8001c3a <_fwalk_reent>
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <fflush+0x20>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	f7ff bfb9 	b.w	8002aa4 <_fflush_r>
 8002b32:	bf00      	nop
 8002b34:	08002e20 	.word	0x08002e20
 8002b38:	08002aa5 	.word	0x08002aa5
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <_lseek_r>:
 8002b40:	b538      	push	{r3, r4, r5, lr}
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4d05      	ldr	r5, [pc, #20]	; (8002b60 <_lseek_r+0x20>)
 8002b4c:	602a      	str	r2, [r5, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f7fd ffe4 	bl	8000b1c <_lseek>
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	d102      	bne.n	8002b5e <_lseek_r+0x1e>
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	b103      	cbz	r3, 8002b5e <_lseek_r+0x1e>
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	200000a8 	.word	0x200000a8

08002b64 <__swhatbuf_r>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	460e      	mov	r6, r1
 8002b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	461d      	mov	r5, r3
 8002b72:	b096      	sub	sp, #88	; 0x58
 8002b74:	da07      	bge.n	8002b86 <__swhatbuf_r+0x22>
 8002b76:	2300      	movs	r3, #0
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	89b3      	ldrh	r3, [r6, #12]
 8002b7c:	061a      	lsls	r2, r3, #24
 8002b7e:	d410      	bmi.n	8002ba2 <__swhatbuf_r+0x3e>
 8002b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b84:	e00e      	b.n	8002ba4 <__swhatbuf_r+0x40>
 8002b86:	466a      	mov	r2, sp
 8002b88:	f000 f8fc 	bl	8002d84 <_fstat_r>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	dbf2      	blt.n	8002b76 <__swhatbuf_r+0x12>
 8002b90:	9a01      	ldr	r2, [sp, #4]
 8002b92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b9a:	425a      	negs	r2, r3
 8002b9c:	415a      	adcs	r2, r3
 8002b9e:	602a      	str	r2, [r5, #0]
 8002ba0:	e7ee      	b.n	8002b80 <__swhatbuf_r+0x1c>
 8002ba2:	2340      	movs	r3, #64	; 0x40
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	6023      	str	r3, [r4, #0]
 8002ba8:	b016      	add	sp, #88	; 0x58
 8002baa:	bd70      	pop	{r4, r5, r6, pc}

08002bac <__smakebuf_r>:
 8002bac:	898b      	ldrh	r3, [r1, #12]
 8002bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bb0:	079d      	lsls	r5, r3, #30
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	d507      	bpl.n	8002bc8 <__smakebuf_r+0x1c>
 8002bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	6123      	str	r3, [r4, #16]
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	6163      	str	r3, [r4, #20]
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	466a      	mov	r2, sp
 8002bca:	ab01      	add	r3, sp, #4
 8002bcc:	f7ff ffca 	bl	8002b64 <__swhatbuf_r>
 8002bd0:	9900      	ldr	r1, [sp, #0]
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f7ff f853 	bl	8001c80 <_malloc_r>
 8002bda:	b948      	cbnz	r0, 8002bf0 <__smakebuf_r+0x44>
 8002bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002be0:	059a      	lsls	r2, r3, #22
 8002be2:	d4ef      	bmi.n	8002bc4 <__smakebuf_r+0x18>
 8002be4:	f023 0303 	bic.w	r3, r3, #3
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	81a3      	strh	r3, [r4, #12]
 8002bee:	e7e3      	b.n	8002bb8 <__smakebuf_r+0xc>
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <__smakebuf_r+0x7c>)
 8002bf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	6020      	str	r0, [r4, #0]
 8002bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfc:	81a3      	strh	r3, [r4, #12]
 8002bfe:	9b00      	ldr	r3, [sp, #0]
 8002c00:	6120      	str	r0, [r4, #16]
 8002c02:	6163      	str	r3, [r4, #20]
 8002c04:	9b01      	ldr	r3, [sp, #4]
 8002c06:	b15b      	cbz	r3, 8002c20 <__smakebuf_r+0x74>
 8002c08:	4630      	mov	r0, r6
 8002c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c0e:	f000 f8cb 	bl	8002da8 <_isatty_r>
 8002c12:	b128      	cbz	r0, 8002c20 <__smakebuf_r+0x74>
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	81a3      	strh	r3, [r4, #12]
 8002c20:	89a0      	ldrh	r0, [r4, #12]
 8002c22:	4305      	orrs	r5, r0
 8002c24:	81a5      	strh	r5, [r4, #12]
 8002c26:	e7cd      	b.n	8002bc4 <__smakebuf_r+0x18>
 8002c28:	08001a9d 	.word	0x08001a9d

08002c2c <memchr>:
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b510      	push	{r4, lr}
 8002c30:	b2c9      	uxtb	r1, r1
 8002c32:	4402      	add	r2, r0
 8002c34:	4293      	cmp	r3, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	d101      	bne.n	8002c3e <memchr+0x12>
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	e003      	b.n	8002c46 <memchr+0x1a>
 8002c3e:	7804      	ldrb	r4, [r0, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	428c      	cmp	r4, r1
 8002c44:	d1f6      	bne.n	8002c34 <memchr+0x8>
 8002c46:	bd10      	pop	{r4, pc}

08002c48 <memcpy>:
 8002c48:	440a      	add	r2, r1
 8002c4a:	4291      	cmp	r1, r2
 8002c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c50:	d100      	bne.n	8002c54 <memcpy+0xc>
 8002c52:	4770      	bx	lr
 8002c54:	b510      	push	{r4, lr}
 8002c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c5a:	4291      	cmp	r1, r2
 8002c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c60:	d1f9      	bne.n	8002c56 <memcpy+0xe>
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <__malloc_lock>:
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <__malloc_lock+0x8>)
 8002c66:	f7ff b808 	b.w	8001c7a <__retarget_lock_acquire_recursive>
 8002c6a:	bf00      	nop
 8002c6c:	200000a0 	.word	0x200000a0

08002c70 <__malloc_unlock>:
 8002c70:	4801      	ldr	r0, [pc, #4]	; (8002c78 <__malloc_unlock+0x8>)
 8002c72:	f7ff b803 	b.w	8001c7c <__retarget_lock_release_recursive>
 8002c76:	bf00      	nop
 8002c78:	200000a0 	.word	0x200000a0

08002c7c <_free_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4605      	mov	r5, r0
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d043      	beq.n	8002d0c <_free_r+0x90>
 8002c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c88:	1f0c      	subs	r4, r1, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bfb8      	it	lt
 8002c8e:	18e4      	addlt	r4, r4, r3
 8002c90:	f7ff ffe8 	bl	8002c64 <__malloc_lock>
 8002c94:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <_free_r+0x94>)
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	4610      	mov	r0, r2
 8002c9a:	b933      	cbnz	r3, 8002caa <_free_r+0x2e>
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	6014      	str	r4, [r2, #0]
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ca6:	f7ff bfe3 	b.w	8002c70 <__malloc_unlock>
 8002caa:	42a3      	cmp	r3, r4
 8002cac:	d90a      	bls.n	8002cc4 <_free_r+0x48>
 8002cae:	6821      	ldr	r1, [r4, #0]
 8002cb0:	1862      	adds	r2, r4, r1
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	bf01      	itttt	eq
 8002cb6:	681a      	ldreq	r2, [r3, #0]
 8002cb8:	685b      	ldreq	r3, [r3, #4]
 8002cba:	1852      	addeq	r2, r2, r1
 8002cbc:	6022      	streq	r2, [r4, #0]
 8002cbe:	6063      	str	r3, [r4, #4]
 8002cc0:	6004      	str	r4, [r0, #0]
 8002cc2:	e7ed      	b.n	8002ca0 <_free_r+0x24>
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	b10b      	cbz	r3, 8002cce <_free_r+0x52>
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	d9fa      	bls.n	8002cc4 <_free_r+0x48>
 8002cce:	6811      	ldr	r1, [r2, #0]
 8002cd0:	1850      	adds	r0, r2, r1
 8002cd2:	42a0      	cmp	r0, r4
 8002cd4:	d10b      	bne.n	8002cee <_free_r+0x72>
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	4401      	add	r1, r0
 8002cda:	1850      	adds	r0, r2, r1
 8002cdc:	4283      	cmp	r3, r0
 8002cde:	6011      	str	r1, [r2, #0]
 8002ce0:	d1de      	bne.n	8002ca0 <_free_r+0x24>
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4401      	add	r1, r0
 8002ce8:	6011      	str	r1, [r2, #0]
 8002cea:	6053      	str	r3, [r2, #4]
 8002cec:	e7d8      	b.n	8002ca0 <_free_r+0x24>
 8002cee:	d902      	bls.n	8002cf6 <_free_r+0x7a>
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	e7d4      	b.n	8002ca0 <_free_r+0x24>
 8002cf6:	6820      	ldr	r0, [r4, #0]
 8002cf8:	1821      	adds	r1, r4, r0
 8002cfa:	428b      	cmp	r3, r1
 8002cfc:	bf01      	itttt	eq
 8002cfe:	6819      	ldreq	r1, [r3, #0]
 8002d00:	685b      	ldreq	r3, [r3, #4]
 8002d02:	1809      	addeq	r1, r1, r0
 8002d04:	6021      	streq	r1, [r4, #0]
 8002d06:	6063      	str	r3, [r4, #4]
 8002d08:	6054      	str	r4, [r2, #4]
 8002d0a:	e7c9      	b.n	8002ca0 <_free_r+0x24>
 8002d0c:	bd38      	pop	{r3, r4, r5, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000090 	.word	0x20000090

08002d14 <_realloc_r>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	4607      	mov	r7, r0
 8002d18:	4614      	mov	r4, r2
 8002d1a:	460e      	mov	r6, r1
 8002d1c:	b921      	cbnz	r1, 8002d28 <_realloc_r+0x14>
 8002d1e:	4611      	mov	r1, r2
 8002d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d24:	f7fe bfac 	b.w	8001c80 <_malloc_r>
 8002d28:	b922      	cbnz	r2, 8002d34 <_realloc_r+0x20>
 8002d2a:	f7ff ffa7 	bl	8002c7c <_free_r>
 8002d2e:	4625      	mov	r5, r4
 8002d30:	4628      	mov	r0, r5
 8002d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d34:	f000 f848 	bl	8002dc8 <_malloc_usable_size_r>
 8002d38:	42a0      	cmp	r0, r4
 8002d3a:	d20f      	bcs.n	8002d5c <_realloc_r+0x48>
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4638      	mov	r0, r7
 8002d40:	f7fe ff9e 	bl	8001c80 <_malloc_r>
 8002d44:	4605      	mov	r5, r0
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d0f2      	beq.n	8002d30 <_realloc_r+0x1c>
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	f7ff ff7b 	bl	8002c48 <memcpy>
 8002d52:	4631      	mov	r1, r6
 8002d54:	4638      	mov	r0, r7
 8002d56:	f7ff ff91 	bl	8002c7c <_free_r>
 8002d5a:	e7e9      	b.n	8002d30 <_realloc_r+0x1c>
 8002d5c:	4635      	mov	r5, r6
 8002d5e:	e7e7      	b.n	8002d30 <_realloc_r+0x1c>

08002d60 <_read_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	4604      	mov	r4, r0
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4d05      	ldr	r5, [pc, #20]	; (8002d80 <_read_r+0x20>)
 8002d6c:	602a      	str	r2, [r5, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f7fd fe77 	bl	8000a62 <_read>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_read_r+0x1e>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_read_r+0x1e>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	200000a8 	.word	0x200000a8

08002d84 <_fstat_r>:
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	2300      	movs	r3, #0
 8002d88:	4d06      	ldr	r5, [pc, #24]	; (8002da4 <_fstat_r+0x20>)
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	602b      	str	r3, [r5, #0]
 8002d92:	f7fd feaa 	bl	8000aea <_fstat>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	d102      	bne.n	8002da0 <_fstat_r+0x1c>
 8002d9a:	682b      	ldr	r3, [r5, #0]
 8002d9c:	b103      	cbz	r3, 8002da0 <_fstat_r+0x1c>
 8002d9e:	6023      	str	r3, [r4, #0]
 8002da0:	bd38      	pop	{r3, r4, r5, pc}
 8002da2:	bf00      	nop
 8002da4:	200000a8 	.word	0x200000a8

08002da8 <_isatty_r>:
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	2300      	movs	r3, #0
 8002dac:	4d05      	ldr	r5, [pc, #20]	; (8002dc4 <_isatty_r+0x1c>)
 8002dae:	4604      	mov	r4, r0
 8002db0:	4608      	mov	r0, r1
 8002db2:	602b      	str	r3, [r5, #0]
 8002db4:	f7fd fea8 	bl	8000b08 <_isatty>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d102      	bne.n	8002dc2 <_isatty_r+0x1a>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	b103      	cbz	r3, 8002dc2 <_isatty_r+0x1a>
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	200000a8 	.word	0x200000a8

08002dc8 <_malloc_usable_size_r>:
 8002dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dcc:	1f18      	subs	r0, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bfbc      	itt	lt
 8002dd2:	580b      	ldrlt	r3, [r1, r0]
 8002dd4:	18c0      	addlt	r0, r0, r3
 8002dd6:	4770      	bx	lr

08002dd8 <_init>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr

08002de4 <_fini>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr
